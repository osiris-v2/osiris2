#!/bin/bash

# Leer nombre personalizado, por defecto "osiris2"
read -p "Ingrese el nombre del directorio base (alfanumérico, por defecto 'osiris2'): " x
x=${x:-osiris2}
if ! [[ "$x" =~ ^[a-zA-Z0-9_-]+$ ]]; then
  echo "Error: El nombre solo puede contener caracteres alfanuméricos, guiones o guiones bajos."
  exit 1
fi

# Variables
base="/var/${x}"
repo_url="https://github.com/osiris-v2/osiris2.git"
gitup_file="${base}/bin/gitup.txt"
install_log="${base}/inst.json"
temp_repo="${base}/tmp_repo"
update_mode=false

# Crear directorios necesarios
mkdir -p "${base}/bin" "${temp_repo}"

# Verificar si ya existe una instalación exitosa
if [ -f "${base}/inst.ok" ]; then
  echo "Se detectó una instalación existente."
  echo "¿Desea actualizar la instalación? (s/n)"
  read -r respuesta
  if [[ "$respuesta" =~ ^[sS]$ ]]; then
    update_mode=true
    echo "Modo de actualización activado."
  else
    echo "Saliendo sin realizar cambios."
    exit 0
  fi
fi

# Descargar archivo bin/gitup.txt del repositorio
echo "Descargando bin/gitup.txt del repositorio..."
git clone --depth 1 --filter=blob:none --sparse "${repo_url}" "${temp_repo}" || {
  echo "Error: No se pudo clonar el repositorio." | tee -a "${install_log}"
  echo '{"status": "error", "message": "No se pudo clonar el repositorio"}' > "${base}/inst.error"
  exit 1
}
cd "${temp_repo}" || exit
git sparse-checkout set --no-cone "bin/gitup.txt" || {
  echo "Error: No se pudo configurar sparse-checkout para bin/gitup.txt" | tee -a "${install_log}"
  echo '{"status": "error", "message": "Error en sparse-checkout para bin/gitup.txt"}' > "${base}/inst.error"
  exit 1
}

# Mover gitup.txt a $base/bin/
if [ -f "bin/gitup.txt" ]; then
  dest_file="${base}/bin/gitup.txt"
  if [ -f "${dest_file}" ] && ! ${update_mode}; then
    echo "bin/gitup.txt ya existe y no se sobrescribirá (sin actualización)."
  else
    mv "bin/gitup.txt" "${dest_file}" || {
      echo "Error: No se pudo mover bin/gitup.txt a ${base}/bin/" | tee -a "${install_log}"
      echo '{"status": "error", "message": "Error al mover gitup.txt"}' > "${base}/inst.error"
      exit 1
    }
    echo "gitup.txt descargado y copiado a ${base}/bin/"
  fi
else
  echo "Error: bin/gitup.txt no se encuentra en el repositorio" | tee -a "${install_log}"
  echo '{"status": "error", "message": "bin/gitup.txt no encontrado"}' > "${base}/inst.error"
  exit 1
fi

# Limpiar directorio temporal
rm -rf "${temp_repo}"

# Leer y procesar archivos listados en gitup.txt
echo "Procesando archivos listados en gitup.txt..."
while IFS= read -r line; do
  line="${line%%*( )}"
  [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue

  dest="${base}/${line}"
  echo "Procesando: ${line}"

  # Verificar si el archivo/directorio ya existe
  if [ -e "${dest}" ] && ! ${update_mode}; then
    echo "${line} ya existe y no se sobrescribirá (sin actualización)."
    continue
  fi

  # Descargar archivo/directorio
  git clone --depth 1 --filter=blob:none --sparse "${repo_url}" "${temp_repo}" || {
    echo "Error: No se pudo clonar el repositorio para ${line}" | tee -a "${install_log}"
    exit 1
  }
  cd "${temp_repo}" || exit
  if [[ "$line" == */ ]]; then
    git sparse-checkout set --cone "${line}" || {
      echo "Error: No se pudo configurar sparse-checkout para ${line}" | tee -a "${install_log}"
      exit 1
    }
  else
    git sparse-checkout set --no-cone "${line}" || {
      echo "Error: No se pudo configurar sparse-checkout para ${line}" | tee -a "${install_log}"
      exit 1
    }
  fi

  # Mover archivo/directorio descargado
  if [ -e "${line}" ]; then
    mkdir -p "$(dirname "${dest}")"
    mv "${line}" "${dest}" || {
      echo "Error: No se pudo mover ${line} a ${dest}" | tee -a "${install_log}"
      exit 1
    }
    echo "Archivo descargado: ${line}" | tee -a "${install_log}"
  else
    echo "Error: ${line} no se encuentra en el repositorio" | tee -a "${install_log}"
  fi
  rm -rf "${temp_repo}"
done < "${gitup_file}"

# Gestionar permisos y finalizar instalación
find "${base}" -type f \( -name "*.sh" -o \( ! -name "*.*" -exec grep -q '^#!' {} \; \) \) -size +0c -exec chmod +x {} \;
if ${update_mode}; then
  echo '{"status": "success", "message": "Actualización completada exitosamente"}' > "${base}/inst.ok"
  echo "Actualización completada exitosamente." | tee -a "${install_log}"
else
  echo '{"status": "success", "message": "Instalación completada exitosamente"}' > "${base}/inst.ok"
  echo "Instalación completada exitosamente." | tee -a "${install_log}"
fi
exit 0

