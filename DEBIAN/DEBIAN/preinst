#!/bin/bash
# preinst script for osiris-BIO

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
# URL of the raw Bash runner script on GitHub
DOWNLOAD_RUNNER_SH_URL="https://raw.githubusercontent.com/osiris-v2/osiris2/refs/heads/master/bin/com/demo/bio-install.sh"
BIO_DIR="/usr/local/osiris2/bio"

# Muestra el directorio por defecto y pide al usuario que seleccione una ruta
read -p "Selecciona la ruta al directorio bio. Por defecto ( ${BIO_DIR} ): " resp_usuario

# Elimina espacios en blanco al inicio y al final de la respuesta del usuario
ruta_propuesta=$(echo "$resp_usuario" | xargs)

# Si la ruta propuesta no está vacía después de limpiar los espacios, la usamos.
if [ -n "$ruta_propuesta" ]; then
    BIO_DIR="$ruta_propuesta"
    echo "¡Ruta de directorio BIO actualizada con éxito! ✅ Nuevo directorio: ${BIO_DIR}"
else
    # Si el usuario no introdujo nada o solo espacios, se mantiene el directorio por defecto.
    echo "No se introdujo ninguna ruta. Se mantiene el directorio por defecto: ${BIO_DIR} 🏡"
fi

# Confirmación final del directorio BIO seleccionado
echo "✨ El directorio BIO final seleccionado es: ${BIO_DIR}"


      

mkdir -p $BIO_DIR/tmp
chmod -R 0777 $BIO_DIR


# Path where the downloaded runner script will be saved on the system
DEST_RUNNER_SH_SCRIPT="${BIO_DIR}/bio.sh" # Standard location for local scripts
# Path where the .desktop file for the application launcher will be created
DEST_DESKTOP_FILE="/usr/share/applications/bio-beta.app.desktop" # Standard location for system-wide app launchers
# Name that will appear in the application menu
APP_NAME=" BIO 1.0 "
# Icon for the launcher (use a standard icon name or an absolute path)
# You can find standard icons in directories like /usr/share/icons/gnome/scalable/apps/
APP_ICON="dialog-password" # Example: a password-related icon
# Comment for the launcher
APP_COMMENT="Educational demo of public/private keys for crypto wallets"
# Categories for the launcher (helps place it in menus)
APP_CATEGORIES="Utility;Education;"
# Keywords for searching in the application menu
APP_KEYWORDS="crypto;keys;public;private;wallet;demo;"

# --- Helper Functions ---

# Function to print an error message to stderr and exit
exit_with_error() {
    echo "Error in preinst: $1" >&2
    exit 1
}

# --- Main preinst Logic ---

# $1 is the argument dpkg passes to the maintainer script.
# For preinst, this is typically "install" or "upgrade".
PHASE="$1"

echo "===================================================================="
echo "  Starting preinst for Crypto Demo Package - Phase: $PHASE         "
echo "===================================================================="

case "$PHASE" in
    install|upgrade)
        echo "-> Performing pre-installation logic for phase: $PHASE."

        # 1. Download the raw Bash runner script
        echo "--> Downloading runner script from: $DOWNLOAD_RUNNER_SH_URL"
        # Use a temporary file for the initial download
        TEMP_DOWNLOAD=$(mktemp)
        if ! curl -fsSL "$DOWNLOAD_RUNNER_SH_URL" -o "$TEMP_DOWNLOAD"; then
            # Provide more specific error if curl failed
            curl_status=$?
            if [ $curl_status -eq 22 ]; then # HTTP error (e.g., 404)
                 exit_with_error "Failed to download script. HTTP Error. Check the URL."
            else
                 exit_with_error "Failed to download script. curl exit code: $curl_status"
            fi
        fi
        echo "--> Runner script downloaded temporarily to $TEMP_DOWNLOAD."

        # 2. Move the downloaded script to its final location and give execute permissions
        echo "--> Moving runner script to $DEST_RUNNER_SH_SCRIPT and granting execute permissions."
        # Ensure the destination directory exists, although /usr/local/bin usually does
        mkdir -p "$(dirname "$DEST_RUNNER_SH_SCRIPT")" || exit_with_error "Could not create destination directory for runner script."
        if ! mv "$TEMP_DOWNLOAD" "$DEST_RUNNER_SH_SCRIPT"; then
            # Check for potential permission issues if move failed
            if [ ! -w "$(dirname "$DEST_RUNNER_SH_SCRIPT")" ]; then
                 exit_with_error "Permission denied: Cannot write to $(dirname "$DEST_RUNNER_SH_SCRIPT"). Root privileges are required."
            else
                 exit_with_error "Failed to move script to $DEST_RUNNER_SH_SCRIPT."
            fi
        fi
        chmod +x "$DEST_RUNNER_SH_SCRIPT" || exit_with_error "Could not make runner script executable."
        echo "--> Runner script moved and marked as executable."

        # 3. Create a .desktop file for the application launcher
        echo "--> Creating .desktop file for the application launcher: $DEST_DESKTOP_FILE."
         # Ensure the destination directory for desktop files exists
        mkdir -p "$(dirname "$DEST_DESKTOP_FILE")" || exit_with_error "Could not create destination directory for desktop file."

        # Create the .desktop file in the standard applications directory
        cat <<EOF > "$DEST_DESKTOP_FILE" || exit_with_error "Could not write .desktop file."
[Desktop Entry]
Name=$APP_NAME
Comment=$APP_COMMENT
Exec="$DEST_RUNNER_SH_SCRIPT" # The command to execute when the launcher is clicked
Icon=$APP_ICON
Terminal=true # The runner script has terminal output, so run in a terminal
Type=Application
Categories=$APP_CATEGORIES
Keywords=$APP_KEYWORDS
EOF
        echo "--> .desktop file created in $DEST_DESKTOP_FILE."

        # Inform the desktop environment about the new .desktop file (optional but helpful)
        # If update-desktop-database command doesn't exist or fails, it's not fatal for the install.
        if command -v update-desktop-database &>/dev/null; then
            echo "--> Updating desktop database..."
            update-desktop-database "$(dirname "$DEST_DESKTOP_FILE")" || true # Ignore error if this fails
        fi

        # 4. Inform the user how to run the demo
        echo "===================================================================="
        echo ">>> Crypto Demo Installation Information <<<"
        echo "The educational demo has been installed."
        echo "You can find it in your application menu under the name:"
        echo "  \"$APP_NAME\""
        echo ""
        echo "Click the icon to launch the demo in a terminal window."
        echo "If you want to add it to your dock or favorites, find it in the"
        echo "application menu and typically you can right-click or drag it."
        echo ""
        echo "The runner script for the demo is located at: $DEST_RUNNER_SH_SCRIPT"
        echo "The launcher file is located at: $DEST_DESKTOP_FILE"
        echo "===================================================================="

        # WE ARE *NOT* EXECUTING THE SCRIPT HERE AS REQUESTED.
        # Execution will happen when the user clicks the desktop icon.

        ;;
    abort-install|abort-upgrade|abort-remove)
        # Logic for cleanup if installation, upgrade, or removal is aborted after preinst ran.
        # Note: Cleanup of files created here (like the .desktop) is typically handled in prerm.
        echo "-> Installation/upgrade/removal aborted. No specific cleanup in preinst."
        ;;
    *)
        # Handle unexpected arguments
        exit_with_error "preinst called with unknown argument: '$PHASE'."
        ;;
esac

chmod +x $DEST_RUNNER_SH_SCRIPT
chmod 0777 $DEST_RUNNER_SH_SCRIPT

echo "===================================================================="
echo "  Finished preinst for Crypto Demo Package successfully           "
echo "===================================================================="

echo " -> Ejecuta .$DEST_RUNNER_SH_SCRIPT "

#VARIABLES PARA POSTINST
echo "BIO" > /tmp/osiris2_install_vars
echo "BIO" >> /tmp/osiris2_install_vars
echo "BIO" >> /tmp/osiris2_install_vars


# Exit successfully
exit 0
