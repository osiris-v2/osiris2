
Manual de Usuario: Osiris AI Log Viewer & Project Explorer üöÄ
Bienvenido a la gu√≠a completa de Osiris, tu asistente inteligente para monitoreo de logs y gesti√≥n de proyectos. Aqu√≠ encontrar√°s todo lo que necesitas saber para instalar, ejecutar y sacar el m√°ximo provecho de esta potente herramienta. ¬°Prep√°rate para optimizar tu flujo de trabajo!

√çndice
¬øFunciona Ejecutando main.py?
Requisitos del Sistema
Estructura del Proyecto
Primeros Pasos: Instalaci√≥n y Ejecuci√≥n
4.1. Configuraci√≥n Inicial
4.2. Ejecuci√≥n
Componentes de la Interfaz de Usuario (UI)
5.1. Ventana Principal
5.2. Explorador de Proyectos
5.3. √Årea de Contenido Principal (Pesta√±as)
5.3.1. Pesta√±a "Logs de Osiris" (Log Viewer)
5.3.2. Pesta√±as de Edici√≥n/Visualizaci√≥n de Archivos
El Lenguaje de Pseudoc√≥digo (realtimes.json)
6.1. Claves Comunes
6.2. La Clave enabled
6.3. La Clave icon
Interacci√≥n con la Inteligencia Artificial (IA)
Consejos, Trucos y Resoluci√≥n de Problemas
Conclusi√≥n

1. ¬øFunciona Ejecutando main.py?
¬°S√≠, absolutamente! üéâ El archivo main.py es el punto de entrada principal de la aplicaci√≥n Osiris. Al ejecutarlo, se inicializar√° la interfaz gr√°fica (PyQt), se cargar√°n las configuraciones, y el sistema estar√° listo para operar.

2. Requisitos del Sistema
Para que Osiris funcione correctamente en tu m√°quina, necesitar√°s lo siguiente:
Python: Python 3.6 o superior. Se recomienda usar la versi√≥n m√°s reciente disponible (ej. Python 3.9+).
Librer√≠as Python:
PyQt5: La biblioteca de binding de Python para el framework Qt, utilizada para la interfaz gr√°fica.
Pillow: Una biblioteca de procesamiento de im√°genes necesaria para la generaci√≥n de iconos por defecto y el manejo de im√°genes.
Puedes instalar ambas con pip ejecutando el siguiente comando en tu terminal:
pip install PyQt5 Pillow
Sistema Operativo: Compatible con Windows, macOS y Linux. Las funcionalidades de "abrir externamente" (os.startfile, subprocess.Popen) est√°n adaptadas para estos entornos.

3. Estructura del Proyecto
Osiris est√° organizado en una estructura modular para facilitar la gesti√≥n y expansi√≥n. Aqu√≠ se muestra la estructura de carpetas y archivos clave:
subcom/system_status/
‚îú‚îÄ‚îÄ main.py                     # ‚û°Ô∏è Punto de entrada de la aplicaci√≥n
‚îú‚îÄ‚îÄ app.py                      # ‚û°Ô∏è La ventana principal de Osiris (UI, l√≥gica global)
‚îú‚îÄ‚îÄ log_entry_widget.py         # ‚û°Ô∏è Widget para cada entrada de log individual
‚îú‚îÄ‚îÄ file_editor_widget.py       # ‚û°Ô∏è NUEVO: Widget para el editor/visualizador de archivos
‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ json_config_reader.py   # ‚û°Ô∏è Lee y valida realtimes.json
‚îÇ   ‚îú‚îÄ‚îÄ pseudocode_interpreter.py # ‚û°Ô∏è Parsea las cadenas 'enabled' e 'icon'
‚îÇ   ‚îú‚îÄ‚îÄ ai_simulator.py         # ‚û°Ô∏è Simula las respuestas de la IA
‚îÇ   ‚îî‚îÄ‚îÄ file_tailer.py          # ‚û°Ô∏è Lee contenido de archivos y ejecuta comandos
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ icon_loader.py          # ‚û°Ô∏è Carga y genera iconos
‚îÇ   ‚îî‚îÄ‚îÄ constants.py            # ‚û°Ô∏è Constantes del proyecto (rutas, defaults, AI responses)
‚îú‚îÄ‚îÄ icons/                      # ‚û°Ô∏è Directorio para iconos (auto-generados si no existen)
‚îî‚îÄ‚îÄ realtimes.json              # ‚û°Ô∏è Archivo de configuraci√≥n principal para los logs
‚îú‚îÄ‚îÄ test_logs/                  # ‚û°Ô∏è Directorio para logs de prueba (creado por main.py)
    ‚îî‚îÄ‚îÄ server.log
    ‚îî‚îÄ‚îÄ process_output.txt
    ‚îî‚îÄ‚îÄ db_health.log
    ‚îî‚îÄ‚îÄ old_logs.txt

4. Primeros Pasos: Instalaci√≥n y Ejecuci√≥n
Sigue estos pasos para poner en marcha Osiris:
4.1. Configuraci√≥n Inicial
Copia la estructura: Descarga o clona la estructura de carpetas subcom/system_status/ en tu m√°quina.
Crea el directorio icons/: Aseg√∫rate de que la carpeta subcom/system_status/icons/ exista. El programa generar√° autom√°ticamente los iconos predeterminados (como osiris_logo.png, default.png, ai_robot.png, etc.) si no los encuentra la primera vez que se ejecuta.
Crea realtimes.json: Guarda el archivo realtimes.json (con el contenido de ejemplo que te proporcion√© anteriormente) en la ra√≠z de subcom/system_status/. Este archivo es crucial para que Osiris sepa qu√© logs monitorear.
Genera logs de prueba: El script main.py crear√° autom√°ticamente el directorio test_logs/ dentro de subcom/system_status/ y algunos archivos de log de ejemplo si no existen. Puedes modificar estos logs o crear los tuyos propios en cualquier lugar accesible por el programa.
4.2. Ejecuci√≥n
Abre tu terminal o l√≠nea de comandos, navega hasta el directorio subcom/system_status/ y ejecuta:
python main.py
Deber√≠as ver la ventana principal de Osiris aparecer, junto con un mensaje de bienvenida de la IA. ¬°Felicidades, Osiris est√° operativo! üéâ

5. Componentes de la Interfaz de Usuario (UI)
Osiris presenta una interfaz de usuario intuitiva dise√±ada para facilitar tanto el monitoreo de logs como la gesti√≥n de archivos de proyecto.
5.1. Ventana Principal
Cabecera: Muestra el t√≠tulo de la aplicaci√≥n y el logo de Osiris. Incluye un bot√≥n para "Recargar Config", que permite recargar realtimes.json en caliente sin reiniciar la aplicaci√≥n.
Splitter Principal: Un divisor redimensionable que divide la ventana en dos paneles: el "Explorador de Proyectos" a la izquierda y el "√Årea de Contenido Principal" (con pesta√±as) a la derecha.
Barra de Estado: En la parte inferior, muestra mensajes del sistema (ej. carga de logs, errores) y la hora actual del sistema (‚åö).
5.2. Explorador de Proyectos
Ubicado en el panel izquierdo.
Vista de √Årbol (Tree View): Muestra la estructura de archivos y directorios a partir de la ra√≠z de tu proyecto (subcom/system_status/).
Interacci√≥n:
Doble Clic: Al hacer doble clic en un archivo, se abrir√° en una nueva pesta√±a en el √Årea de Contenido Principal. Al hacer doble clic en un directorio, se expandir√° o colapsar√° en la vista de √°rbol.
Men√∫ Contextual (Clic Derecho):
Abrir Archivo/Carpeta: Equivalente al doble clic.
Abrir con aplicaci√≥n externa...: Abre el archivo o directorio seleccionado con la aplicaci√≥n predeterminada de tu sistema operativo (ej. VS Code para .py, Bloc de notas para .txt, visor de im√°genes para .png, etc.). ¬°Muy √∫til para trabajar fuera de Osiris!
Nuevo Archivo Aqu√≠...: Permite crear un nuevo archivo de texto en blanco en el directorio actualmente seleccionado.
Botones R√°pidos:
"üìÑ Nuevo Archivo": Abre una pesta√±a de editor de texto en blanco para un archivo nuevo.
"üìÇ Abrir Archivo...": Abre un di√°logo para seleccionar cualquier archivo del sistema y abrirlo en una nueva pesta√±a.
5.3. √Årea de Contenido Principal (Pesta√±as)
Ubicada en el panel derecho, esta √°rea utiliza pesta√±as (QTabWidget) para organizar el contenido. La primera pesta√±a siempre ser√° el visor de logs.
5.3.1. Pesta√±a "Logs de Osiris" (Log Viewer)
Aqu√≠ se muestran todas las entradas de log definidas en realtimes.json. Cada entrada de log es un LogEntryWidget independiente.
Elementos del LogEntryWidget:
Icono: Un icono representativo del log, definido por el pseudoc√≥digo icon.
Nombre: El nombre amigable del log (ej. "Servidor de Aplicaciones").
√ölt. act.: Muestra la √∫ltima vez que el log fue actualizado.
Botones de Control:
üîÑ (Actualizar): Fuerza una actualizaci√≥n manual del log.
‚èØÔ∏è (Pausar/Reanudar): Alterna el estado de actualizaci√≥n autom√°tica del log.
√Årea de Texto del Log: Muestra el contenido del archivo de log, con soporte para filtrado y resaltado de l√≠neas.
√Årea de Respuesta de IA: Un peque√±o label debajo del log que muestra la √∫ltima respuesta de la IA si el log tiene trigger_ai activado.
Men√∫ Contextual (Clic Derecho en el Log):
Actualizar ahora: Lo mismo que el bot√≥n de actualizar.
Pausar/Reanudar: Lo mismo que el bot√≥n de pausa/reanudaci√≥n.
Consultar IA sobre 't√≥pico': Permite forzar una consulta a la IA sobre este log, incluso si no est√° configurado para hacerlo autom√°ticamente.
Abrir archivo log...: Abre el archivo de log asociado con la aplicaci√≥n externa predeterminada.
Ver configuraci√≥n de la entrada: Muestra un cuadro de di√°logo con todos los detalles de configuraci√≥n (raw e interpretados) de esa entrada de log. ¬°Excelente para depuraci√≥n!
5.3.2. Pesta√±as de Edici√≥n/Visualizaci√≥n de Archivos
Cuando abres un archivo desde el Explorador de Proyectos o con el di√°logo "Abrir Archivo...", se abre una nueva pesta√±a con un FileEditorWidget.
Tipos de Contenido:
Archivos de Texto (.py, .json, .txt, .log, .sh, .php, etc.): Se muestran en un QTextEdit completamente editable.
Un asterisco * aparecer√° en el t√≠tulo de la pesta√±a si el archivo tiene cambios sin guardar.
El bot√≥n "üíæ Guardar" y la acci√≥n de men√∫ "Archivo -> Guardar" se habilitar√°n autom√°ticamente cuando haya cambios y la pesta√±a actual sea un archivo de texto.
Para un "Nuevo Archivo", al guardar por primera vez se te pedir√° una ruta para guardarlo.
Archivos de Imagen (.png, .jpg, .svg, etc.): La imagen se previsualizar√° directamente en la pesta√±a, escalada para encajar.
Archivos Multimedia (.mp4, .mp3, etc.): Se mostrar√° informaci√≥n y metadatos simulados del archivo (ruta, tipo, duraci√≥n, etc.), ya que la reproducci√≥n directa o el parseo completo de metadatos requieren librer√≠as adicionales y quedan fuera del alcance de este prototipo.
Otros / No Soportados: Se mostrar√° un mensaje indicando que el tipo de archivo no es editable o no soporta previsualizaci√≥n directa.
Cierre de Pesta√±as: Al intentar cerrar una pesta√±a con un archivo de texto modificado, Osiris te preguntar√° si deseas "Guardar", "Descartar" o "Cancelar" la acci√≥n de cierre.

6. El Lenguaje de Pseudoc√≥digo (realtimes.json)
El archivo realtimes.json es el coraz√≥n de la configuraci√≥n de Osiris. Define cada entrada de log y c√≥mo debe comportarse. Es un array de objetos JSON, donde cada objeto representa una entrada de log.
[
    {
        "id": "app_server",
        "name": "Servidor de Aplicaciones",
        "alias": "server.log",
        "path": "/tmp/osiris_logs",
        "icon": "path:icons/server.png",
        "enabled": "true {lines:15, reload:5, filter_regex:'(ERROR|WARN)', highlight_regex:'ERROR:.*', notify_change:true}"
    },
    // ... m√°s entradas ...
]
6.1. Claves Comunes
id (cadena): Identificador √∫nico para la entrada.
name (cadena): Nombre amigable que se mostrar√° en la UI.
alias (cadena): El nombre del archivo de log (ej. server.log).
path (cadena): La ruta absoluta del directorio donde se encuentra el archivo de log (ej. /tmp/osiris_logs). Osiris construir√° la ruta completa como path/alias.
icon (cadena): Define el icono de la entrada. Ver detalles en la secci√≥n 6.3.
enabled (cadena): Controla el comportamiento y las opciones de actualizaci√≥n del log. Ver detalles en la secci√≥n 6.2.
6.2. La Clave enabled
Esta clave es una cadena que puede ser un estado simple o un pseudoc√≥digo con par√°metros JSON-like.
"true": La entrada se muestra y se actualiza autom√°ticamente con valores por defecto (ej. cada 5 segundos, √∫ltimas 10 l√≠neas).
"pause": La entrada se muestra, pero solo una vez al cargar. No se actualiza autom√°ticamente. Puedes actualizarla manualmente.
"false": La entrada est√° oculta y no se actualiza.
Par√°metros Avanzados para 'true':
Cuando el estado es "true", puedes a√±adir un objeto JSON-like para configurar el comportamiento detallado:
"enabled": "true {param1:value1, param2:value2, ...}"
Par√°metros disponibles:
reload (entero, segundos): Frecuencia de actualizaci√≥n del log. M√≠nimo 1 segundo. Por defecto: 5.
lines (entero o cadena "all"): N√∫mero de l√≠neas a leer desde el final del archivo. Si es "all", lee el archivo completo. Por defecto: 10.
filter_regex (cadena): Expresi√≥n regular para filtrar las l√≠neas. Solo las l√≠neas que coincidan con esta regex se mostrar√°n. (Ej. '(ERROR|WARN)')
highlight_regex (cadena): Expresi√≥n regular para resaltar l√≠neas espec√≠ficas dentro del log con un color distintivo (ej. fondo amarillo, texto rojo). (Ej. 'CRITICAL:.*')
encoding (cadena): Codificaci√≥n del archivo de log (ej. "utf-8", "latin-1"). Por defecto: "utf-8".
trigger_ai (booleano true o cadena):
Si es true, la IA se activar√° con el id de la entrada como t√≥pico.
Si es una cadena (ej. "system_status"), se usar√° esa cadena como t√≥pico para la IA.
La respuesta de la IA se mostrar√° debajo del log.
update_on_change (booleano): Si es true, el log se actualizar√° solo cuando el archivo cambie en el sistema de archivos (usa QFileSystemWatcher). El par√°metro reload se ignora. ¬°Muy eficiente!
notify_change (booleano): Si es true, el widget de log cambiar√° visualmente (borde verde, fondo claro) por un breve momento cuando el contenido del log se actualice.
pre_process_cmd (cadena): ¬°NUEVO y POTENTE! Un comando de shell que se ejecuta antes de leer el log. La salida est√°ndar (stdout) de este comando se utilizar√° como el contenido del log para esa entrada.
‚ö†Ô∏è Precauci√≥n: Ten cuidado al usar comandos de shell en pre_process_cmd, ya que comandos maliciosos pueden comprometer tu sistema. √ösalo con comandos de confianza.
Ejemplos:
"df -h | head -n 2" (mostrar uso de disco)
"cat /proc/cpuinfo | grep 'model name' | head -n 1" (mostrar modelo de CPU)
"tail -n 5 /var/log/syslog | grep 'fail'" (combinado con tail para logs espec√≠ficos)
6.3. La Clave icon
La clave icon es una cadena que define c√≥mo se carga el icono de la entrada.
Tipos de Iconos y Pseudoc√≥digo:
"path:/ruta/a/icono.png": Carga un icono desde una ruta de archivo relativa a subcom/system_status/. (ej. "path:icons/server.png")
"img:base64:format:data": Carga una imagen codificada en Base64.
format: El formato de la imagen (ej. png, jpeg, svg).
data: La cadena Base64 de la imagen.
Ej: "img:base64:png:iVBORw0KGgoAAAA..."
"ai_generate:prompt:format": (Simulado) La aplicaci√≥n "solicitar√≠a" a una IA que genere una imagen/icono. Para este prototipo, cargar√° un icono de 'robot IA' por defecto.
prompt: La descripci√≥n para la IA (ej. "robot de datos").
format: El formato deseado (ej. svg, png).
"video:url:type": (Simulado) Para futuros usos multimedia. Para este prototipo, cargar√° un icono de 'video play' por defecto y mostrar√° la URL/tipo en la informaci√≥n.
url: La URL del video (local o remoto).
type: El tipo de video (ej. mp4, hls).

7. Interacci√≥n con la Inteligencia Artificial (IA)
Osiris incorpora un AISimulator que imita el comportamiento de una IA.
Activaci√≥n:
Autom√°tica: Cuando una entrada de log tiene trigger_ai en su configuraci√≥n enabled. La IA procesar√° el contenido actual del log o el t√≥pico definido.
Manual: Puedes forzar una consulta a la IA haciendo clic derecho en un LogEntryWidget y seleccionando "Consultar IA sobre 't√≥pico'".
"Redundancia" de la IA: El simulador de IA est√° dise√±ado para dar respuestas diferentes o m√°s "profundas" cada vez que se le consulta sobre el mismo t√≥pico. Esto simula una IA que "aprende" o proporciona an√°lisis m√°s detallados con interacciones repetidas. Observa c√≥mo el mensaje cambia en el label de IA.
Ej: Primera consulta system_status -> "Sistema OK." Segunda -> "CPU al 30%, Memoria al 65%." Tercera -> "An√°lisis predictivo: posible pico de uso..."

8. Consejos, Trucos y Resoluci√≥n de Problemas
Recarga en Caliente de realtimes.json: Osiris monitorea autom√°ticamente los cambios en realtimes.json. Si editas y guardas este archivo (a√±adiendo, modificando o eliminando entradas), la aplicaci√≥n detectar√° el cambio y actualizar√° las entradas de log en la UI sin necesidad de reiniciar. ¬°Pru√©balo!
Permisos de Archivos: Aseg√∫rate de que Osiris tenga permisos de lectura para los archivos de log y los directorios especificados en realtimes.json. Si un log no aparece o muestra un error, verifica los permisos.
Errores de Pillow: Si ves errores relacionados con im√°genes o iconos, aseg√∫rate de que Pillow est√© correctamente instalado (pip install Pillow).
Codificaci√≥n de Archivos: Si un log muestra caracteres extra√±os, intenta especificar la codificaci√≥n correcta ("encoding":"latin-1", "encoding":"cp1252", etc.) en la configuraci√≥n enabled de esa entrada.
Depuraci√≥n: Utiliza la opci√≥n "Ver configuraci√≥n de la entrada" en el men√∫ contextual de cada log para inspeccionar c√≥mo Osiris ha interpretado el pseudoc√≥digo de enabled e icon. Los mensajes de advertencia en la consola tambi√©n son √∫tiles.
Comandos pre_process_cmd: Si un comando de shell no funciona, prueba a ejecutarlo directamente en tu terminal para verificar su sintaxis y salida. Recuerda que la salida de error (stderr) del comando tambi√©n se mostrar√° en el log.
Navegaci√≥n del Explorador: Si el explorador de proyectos no muestra la estructura completa, haz clic derecho y usa "Abrir Archivo/Carpeta" en los directorios para expandirlos o contraerlos.
Guardar Cambios en Archivos: ¬°No olvides que las pesta√±as de edici√≥n de texto muestran un * si el archivo ha sido modificado y necesita ser guardado! La aplicaci√≥n te preguntar√° al cerrar si hay cambios pendientes.

9. Conclusi√≥n
¬°Felicidades! Has explorado a fondo el sistema Osiris. Esta versi√≥n "Beta Tested Advanced" te proporciona una plataforma robusta y din√°mica para monitorear logs en tiempo real y gestionar tus archivos de proyecto. La flexibilidad de su pseudoc√≥digo y la interacci√≥n simulada con la IA abren un sinf√≠n de posibilidades para la automatizaci√≥n y el an√°lisis.
¬°Esperamos que Osiris te sea de gran utilidad en tus proyectos! Si tienes m√°s ideas o descubres nuevas formas de mejorarlo, ¬°no dudes en compartirlas! ¬°El esp√≠ritu de Osiris te guiar√°! ‚ú®ü§ñ
