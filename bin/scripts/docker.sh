#!/bin/bash

# ========================================================================================================
# Interfaz de comunicaci√≥n con Gemini AI de Google
# Interfaz Name: Osiris
# Version: gemini
# Idioma: Espa√±ol
#
# Descripci√≥n:
# Este script es un instalador y gestor completo para Docker y Docker Compose en sistemas Linux.
# Detecta autom√°ticamente si Docker est√° instalado y ofrece opciones para:
#   - Instalaci√≥n guiada en distribuciones populares (Debian/Ubuntu, Fedora/CentOS/RHEL).
#   - Gesti√≥n exhaustiva del servicio Docker (iniciar, detener, reiniciar, habilitar/deshabilitar al inicio).
#   - Gesti√≥n avanzada de im√°genes, contenedores, redes y vol√∫menes Docker.
#   - Herramientas de limpieza para liberar espacio en disco.
#   - Diagn√≥stico y visualizaci√≥n de logs del sistema Docker.
#   - Opciones para a√±adir el usuario al grupo 'docker' y desinstalar Docker por completo.
#   - Soporte para Docker Compose (plugin y standalone).
#
# Instrucciones:
# 1. Guarda este c√≥digo en un archivo (ej: 'osiris_docker_super_manager.sh').
# 2. Dale permisos de ejecuci√≥n: chmod +x osiris_docker_super_manager.sh
# 3. Ejec√∫talo con 'sudo': sudo ./osiris_docker_super_manager.sh
#
# ¬°Bienvenido a Osiris! Usa emojis para dinamizar la conversaci√≥n. ‚ú®
# ========================================================================================================

# --- COLORES PARA LA SALIDA DE TERMINAL ---
VERDE='\033[0;32m'    # √âxito, confirmaci√≥n
ROJO='\033[0;31m'     # Error, advertencia cr√≠tica
AZUL='\033[0;34m'     # Informaci√≥n, progreso
AMARILLO='\033[1;33m' # Advertencia, prompts
CYAN='\033[0;36m'     # Comandos, elementos importantes
MAGENTA='\033[0;35m'  # T√≠tulos de men√∫
RESET='\033[0m'       # Restablecer color

# --- CONSTANTES Y CONFIGURACI√ìN PREDETERMINADA ---
# URL oficial para el script de instalaci√≥n de conveniencia de Docker.
# NO es el m√©todo recomendado para producci√≥n, pero es √∫til para demos o entornos de desarrollo.
DOCKER_INSTALL_URL="https://get.docker.com"

# Versi√≥n predeterminada de Docker Compose Standalone a instalar.
# Siempre verifica la √∫ltima versi√≥n estable aqu√≠: https://github.com/docker/compose/releases
DOCKER_COMPOSE_VERSION="v2.27.0"
# URL para descargar el binario de Docker Compose Standalone.
DOCKER_COMPOSE_URL="https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)"
# Destino com√∫n para el binario de Docker Compose Standalone.
DOCKER_COMPOSE_DEST="/usr/local/bin/docker-compose"
# Directorio para la configuraci√≥n del daemon Docker.
DOCKER_DAEMON_CONFIG_DIR="/etc/docker"
# Archivo de configuraci√≥n principal del daemon.
DOCKER_DAEMON_JSON_FILE="${DOCKER_DAEMON_CONFIG_DIR}/daemon.json"

# --- FUNCIONES DE UTILIDAD GENERAL ---

# Funci√≥n para imprimir un encabezado de secci√≥n con estilo.
# Utiliza colores y una barra para mejorar la legibilidad del men√∫.
print_section_header() {
    echo
    echo -e "${CYAN}=====================================================${RESET}"
    echo -e "${CYAN}=== $1 ===${RESET}"
    echo -e "${CYAN}=====================================================${RESET}"
    echo
}

# Funci√≥n para preguntar al usuario y confirmar una acci√≥n.
# Muestra un prompt en AMARILLO y espera una respuesta 's' o 'n'.
# Retorna 0 para 's√≠' (S/s) y 1 para 'no' (cualquier otra cosa).
confirm_action() {
    local prompt="$1"
    read -p "$(echo -e "${AMARILLO}$prompt (s/n): ${RESET}")" -n 1 -r
    echo # Imprime una nueva l√≠nea para limpiar el terminal despu√©s de la entrada del usuario.
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        return 0 # True (s√≠)
    else
        echo -e "${ROJO}Operaci√≥n cancelada por el usuario. üòü${RESET}"
        return 1 # False (no)
    fi
}

# Funci√≥n para ejecutar un comando de forma segura.
# Muestra el comando que se va a ejecutar, lo ejecuta y luego reporta el √©xito o fracaso.
# Redirige stderr a stdout y usa 'tee' para mostrar la salida en tiempo real.
# Retorna el c√≥digo de salida del comando.
safe_execute() {
    local cmd="$@"
    echo -e "${AZUL}Ejecutando: ${CYAN}$cmd${RESET}"
    # 'eval' permite la expansi√≥n de variables y comandos dentro de la cadena 'cmd'.
    # 'tee /dev/tty' muestra la salida en la terminal mientras tambi√©n la permite ser capturada por 'eval'.
    if eval "$cmd" > >(tee /dev/tty); then
        echo -e "${VERDE}Comando ejecutado con √©xito. ‚úÖ${RESET}"
        return 0 # √âxito
    else
        echo -e "${ROJO}Error al ejecutar el comando. Por favor, revisa los mensajes anteriores para m√°s detalles. ‚ùå${RESET}"
        return 1 # Fallo
    fi
}

# Funci√≥n para verificar si el script se est√° ejecutando con permisos de superusuario (root).
# Si no se ejecuta como root, imprime un mensaje de error y sale del script.
check_sudo() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${ROJO}Este script debe ejecutarse con 'sudo' para poder gestionar Docker y los archivos del sistema. üö®${RESET}"
        echo -e "${ROJO}Por favor, int√©ntalo de nuevo: ${CYAN}sudo ./$(basename "$0")${RESET}"
        exit 1 # Salir con c√≥digo de error
    fi
}

# Funci√≥n para detectar la distribuci√≥n del sistema operativo.
# Lee '/etc/os-release' para obtener el ID de la distribuci√≥n.
# Intenta 'lsb_release' si '/etc/os-release' no est√° presente o no es √∫til.
# Retorna el ID de la distribuci√≥n en min√∫sculas.
get_distribution() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release # Carga las variables de ese archivo en el entorno actual
        echo "$ID" | tr '[:upper:]' '[:lower:]' # Convertir a min√∫sculas
    elif type lsb_release >/dev/null 2>&1; then
        lsb_release -is | tr '[:upper:]' '[:lower:]'
    elif [ -f /etc/redhat-release ]; then
        # Para CentOS/RHEL/AlmaLinux/RockyLinux, /etc/redhat-release contiene la informaci√≥n.
        cat /etc/redhat-release | awk '{print $1}' | tr '[:upper:]' '[:lower:]'
    else
        echo "unknown" # Si no se detecta la distribuci√≥n
    fi
}

# Funci√≥n para verificar si Docker Engine est√° instalado.
# Comprueba la existencia del comando 'docker' en el PATH.
# Retorna 0 si est√° instalado, 1 si no.
is_docker_installed() {
    if command -v docker &>/dev/null; then
        return 0 # Docker est√° instalado
    else
        return 1 # Docker NO est√° instalado
    fi
}

# Funci√≥n para detectar qu√© tipo de Docker Compose est√° instalado.
# Docker Compose puede ser un plugin de la CLI de Docker (docker compose) o un binario standalone (docker-compose).
# Retorna "plugin", "standalone" o "none".
detect_docker_compose_type() {
    if docker compose version &>/dev/null; then
        echo "plugin" # docker compose (con espacio) es el plugin
    elif command -v docker-compose &>/dev/null; then
        echo "standalone" # docker-compose (con guion) es el binario standalone
    else
        echo "none" # Docker Compose no est√° instalado en ninguna forma
    fi
}

# Funci√≥n para a√±adir el usuario actual al grupo 'docker'.
# Esto permite al usuario ejecutar comandos Docker sin necesidad de 'sudo'.
# Requiere que el usuario cierre y vuelva a iniciar sesi√≥n o reinicie para que los cambios surtan efecto.
add_user_to_docker_group() {
    print_section_header "A√±adir Usuario al Grupo Docker üë•"
    local current_user=$(whoami) # Obtiene el nombre del usuario actual.
    echo "Para poder usar Docker sin 'sudo', tu usuario ('${CYAN}$current_user${RESET}') debe ser miembro del grupo 'docker'."
    
    # Comprueba si el usuario ya es miembro del grupo 'docker'.
    if groups $current_user | grep -q '\bdocker\b'; then
        echo -e "${VERDE}Tu usuario ('$current_user') ya es miembro del grupo 'docker'. ¬°Todo listo! ‚úÖ${RESET}"
    else
        if confirm_action "¬øDeseas a√±adir a tu usuario ('$current_user') al grupo 'docker' ahora?"; then
            # 'usermod -aG' a√±ade el usuario al grupo especificado sin eliminarlo de otros grupos.
            safe_execute "usermod -aG docker $current_user"
            if [ $? -eq 0 ]; then
                echo -e "${VERDE}Usuario '$current_user' a√±adido al grupo 'docker' con √©xito. ‚úÖ${RESET}"
                echo -e "${AMARILLO}¬°ADVERTENCIA IMPORTANTE! Para que este cambio surta efecto, debes CERRAR COMPLETAMENTE tu sesi√≥n de terminal y volver a iniciarla, o REINICIAR tu sistema. üö™üîÑ${RESET}"
                echo -e "${CYAN}Despu√©s de reiniciar la sesi√≥n, podr√°s ejecutar comandos 'docker' sin usar 'sudo'. ${RESET}"
            fi
        fi
    fi
}

# --- FUNCIONES DE INSTALACI√ìN DE DOCKER ---

# Instala Docker CE en sistemas basados en Debian/Ubuntu.
# Sigue las instrucciones oficiales para a√±adir el repositorio de Docker.
install_docker_debian() {
    print_section_header "Instalaci√≥n de Docker en Debian/Ubuntu üêß"
    echo "Este proceso instalar√° Docker CE (Community Edition), containerd y el plugin Docker Compose CLI"
    echo "desde los repositorios oficiales de Docker, asegurando las √∫ltimas versiones estables."
    echo -e "${AMARILLO}Aseg√∫rate de tener una conexi√≥n a internet estable. üì∂${RESET}"
    echo
    if confirm_action "¬øProceder con la instalaci√≥n de Docker en Debian/Ubuntu?"; then
        echo -e "${AZUL}Paso 1/7: Actualizando √≠ndices de paquetes APT...${RESET}"
        safe_execute "apt update" || { echo -e "${ROJO}Fallo al actualizar APT. Verifica tu conexi√≥n a internet o los repositorios.${RESET}"; return 1; }

        echo -e "${AZUL}Paso 2/7: Instalando paquetes de pre-requisitos para la configuraci√≥n del repositorio...${RESET}"
        # 'ca-certificates' para asegurar conexiones SSL, 'curl' para descargar, 'gnupg' para claves, 'lsb-release' para detectar distribuci√≥n.
        safe_execute "apt install -y ca-certificates curl gnupg lsb-release" || { echo -e "${ROJO}Fallo al instalar pre-requisitos.${RESET}"; return 1; }

        echo -e "${AZUL}Paso 3/7: Preparando el directorio para las claves GPG...${RESET}"
        # Crea el directorio '/etc/apt/keyrings' con permisos adecuados si no existe.
        safe_execute "install -m 0755 -d /etc/apt/keyrings" || { echo -e "${ROJO}Fallo al crear directorio de keyrings.${RESET}"; return 1; }
        
        echo -e "${AZUL}Paso 4/7: Descargando y a√±adiendo la clave GPG oficial de Docker para verificar la autenticidad de los paquetes...${RESET}"
        # Elimina cualquier clave antigua para evitar conflictos y a√±ade la nueva.
        safe_execute "rm -f /etc/apt/keyrings/docker.gpg"
        safe_execute "curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg" || { echo -e "${ROJO}Fallo al descargar o procesar la clave GPG de Docker.${RESET}"; return 1; }
        safe_execute "chmod a+r /etc/apt/keyrings/docker.gpg" # Otorga permisos de lectura global a la clave.

        echo -e "${AZUL}Paso 5/7: A√±adiendo el repositorio oficial de Docker a las fuentes de APT...${RESET}"
        local DISTRO_CODENAME=$(lsb_release -cs) # Obtiene el nombre en clave de la distribuci√≥n (ej: 'bookworm' para Debian 12).
        # Agrega la l√≠nea del repositorio al archivo de configuraci√≥n de APT.
        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
            $DISTRO_CODENAME stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null || { echo -e "${ROJO}Fallo al a√±adir el repositorio de Docker.${RESET}"; return 1; }
        
        echo -e "${AZUL}Paso 6/7: Actualizando √≠ndices de paquetes nuevamente para incluir el nuevo repositorio de Docker...${RESET}"
        safe_execute "apt update" || { echo -e "${ROJO}Fallo al actualizar APT despu√©s de a√±adir el repositorio de Docker.${RESET}"; return 1; }

        echo -e "${AZUL}Paso 7/7: Instalando Docker Engine, containerd y Docker Compose (plugin CLI)...${RESET}"
        # Instala los paquetes principales de Docker.
        safe_execute "apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" || { echo -e "${ROJO}Fallo al instalar los componentes de Docker. Revisa dependencias o conflictos.${RESET}"; return 1; }

        echo -e "${VERDE}Docker se ha instalado correctamente y el servicio ha sido iniciado autom√°ticamente. ‚úÖüéâ${RESET}"
        echo -e "${AZUL}Ahora, es crucial a√±adir tu usuario al grupo 'docker' para usar Docker sin 'sudo'.${RESET}"
        add_user_to_docker_group # Llama a la funci√≥n para a√±adir el usuario al grupo Docker.
        echo -e "${AMARILLO}¬°Recuerda que deber√°s cerrar y volver a abrir tu sesi√≥n de terminal para que los cambios surtan efecto! üö™üîÑ${RESET}"
        echo -e "${CYAN}Puedes verificar la instalaci√≥n ejecutando: ${VERDE}docker run hello-world${RESET}"
    else
        echo -e "${ROJO}Instalaci√≥n de Docker cancelada. ¬°Quiz√°s en otra ocasi√≥n! üòü${RESET}"
    fi
}

# Instala Docker CE en sistemas basados en Fedora/CentOS/RHEL.
# Sigue las instrucciones oficiales para a√±adir el repositorio de Docker y usar DNF.
install_docker_fedora() {
    print_section_header "Instalaci√≥n de Docker en Fedora/CentOS/RHEL üî∂"
    echo "Este proceso instalar√° Docker CE (Community Edition), containerd y el plugin Docker Compose"
    echo "desde los repositorios oficiales de Docker utilizando el gestor de paquetes DNF/YUM."
    echo -e "${AMARILLO}Aseg√∫rate de tener una conexi√≥n a internet estable. üì∂${RESET}"
    echo
    if confirm_action "¬øProceder con la instalaci√≥n de Docker en Fedora/CentOS/RHEL?"; then
        echo -e "${AZUL}Paso 1/4: Instalando 'dnf-plugins-core' y habilitando el repositorio de Docker...${RESET}"
        # Instala un plugin necesario para gestionar repositorios y a√±ade el repo de Docker.
        safe_execute "dnf -y install dnf-plugins-core" || { echo -e "${ROJO}Fallo al instalar dnf-plugins-core.${RESET}"; return 1; }
        safe_execute "dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo" || { echo -e "${ROJO}Fallo al a√±adir el repositorio de Docker.${RESET}"; return 1; }

        echo -e "${AZUL}Paso 2/4: Instalando Docker Engine, containerd y Docker Compose (plugin CLI)...${RESET}"
        # Instala los paquetes principales de Docker.
        safe_execute "dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" || { echo -e "${ROJO}Fallo al instalar los componentes de Docker. Revisa dependencias.${RESET}"; return 1; }

        echo -e "${AZUL}Paso 3/4: Iniciando el servicio Docker...${RESET}"
        safe_execute "systemctl start docker" || { echo -e "${ROJO}Fallo al iniciar el servicio Docker. Verifica los logs con 'journalctl -u docker.service'.${RESET}"; return 1; }
        
        echo -e "${AZUL}Paso 4/4: Habilitando el servicio Docker para que se inicie autom√°ticamente en cada arranque...${RESET}"
        safe_execute "systemctl enable docker" || { echo -e "${ROJO}Fallo al habilitar el servicio Docker para el inicio autom√°tico.${RESET}"; return 1; }

        echo -e "${VERDE}Docker se ha instalado correctamente y el servicio est√° corriendo. ‚úÖüéâ${RESET}"
        echo -e "${AZUL}Ahora, es crucial a√±adir tu usuario al grupo 'docker' para usar Docker sin 'sudo'.${RESET}"
        add_user_to_docker_group # Llama a la funci√≥n para a√±adir el usuario al grupo Docker.
        echo -e "${AMARILLO}¬°Recuerda que deber√°s cerrar y volver a abrir tu sesi√≥n de terminal para que los cambios surtan efecto! üö™üîÑ${RESET}"
        echo -e "${CYAN}Puedes verificar la instalaci√≥n ejecutando: ${VERDE}docker run hello-world${RESET}"
    else
        echo -e "${ROJO}Instalaci√≥n de Docker cancelada. ¬°Quiz√°s en otra ocasi√≥n! üòü${RESET}"
    fi
}

# Instala Docker usando el script de conveniencia de get.docker.com.
# Este m√©todo es r√°pido pero NO recomendado para entornos de producci√≥n por razones de seguridad y control.
install_docker_generic() {
    print_section_header "Instalaci√≥n Gen√©rica de Docker (Script de Conveniencia) üåê"
    echo "Esta opci√≥n utiliza el script de conveniencia de Docker (get.docker.com)."
    echo "${ROJO}¬°ADVERTENCIA! Este m√©todo NO es el recomendado para entornos de producci√≥n y debe usarse con precauci√≥n, ya que salta pasos de verificaci√≥n de paquetes y puede ser menos predecible.${RESET}"
    echo "Para la forma m√°s segura y recomendada, visita la documentaci√≥n oficial de Docker para tu distribuci√≥n:"
    echo "  ${CYAN}https://docs.docker.com/engine/install/${RESET}"
    echo -e "${AMARILLO}Aseg√∫rate de tener una conexi√≥n a internet estable. üì∂${RESET}"
    echo
    if confirm_action "¬øDeseas intentar ejecutar el script de instalaci√≥n de conveniencia de Docker?"; then
        echo -e "${AZUL}Paso 1/2: Descargando el script de instalaci√≥n desde ${DOCKER_INSTALL_URL}...${RESET}"
        # Descarga el script y lo guarda en 'get-docker.sh'.
        safe_execute "curl -fsSL ${DOCKER_INSTALL_URL} -o get-docker.sh" || { echo -e "${ROJO}Fallo al descargar el script. Verifica la URL y tu conexi√≥n. ${RESET}"; return 1; }
        
        echo -e "${AZUL}Paso 2/2: Ejecutando el script (esto puede tardar unos minutos y puede solicitar tu contrase√±a de sudo)...${RESET}"
        # Ejecuta el script descargado. Este script maneja la instalaci√≥n y el inicio del servicio.
        # Luego, se elimina el script para limpiar.
        if safe_execute "sh get-docker.sh"; then
            safe_execute "rm get-docker.sh" # Limpiar el script descargado.
            echo -e "${VERDE}Docker se ha instalado (posiblemente). ‚úÖ${RESET}"
            add_user_to_docker_group # Llama a la funci√≥n para a√±adir el usuario al grupo Docker.
            echo -e "${AMARILLO}¬°Recuerda que deber√°s cerrar y volver a abrir tu sesi√≥n de terminal para que los cambios surtan efecto! üö™üîÑ${RESET}"
            echo -e "${CYAN}Puedes verificar la instalaci√≥n ejecutando: ${VERDE}docker run hello-world${RESET}"
        else
            echo -e "${ROJO}El script de instalaci√≥n de Docker fall√≥. Consulta los mensajes anteriores y los logs para m√°s detalles. üòû${RESET}"
            safe_execute "rm -f get-docker.sh" # Asegurar limpieza incluso en caso de fallo.
        fi
    else
        echo -e "${ROJO}Instalaci√≥n gen√©rica de Docker cancelada. üòü${RESET}"
    fi
}

# --- FUNCIONES DE GESTI√ìN DEL SERVICIO DOCKER (DAEMON) ---

# Comprueba el estado actual del servicio Docker.
check_docker_status() {
    print_section_header "Estado del Servicio Docker ‚ÑπÔ∏è"
    echo -e "${AZUL}Verificando el estado del daemon Docker con systemctl...${RESET}"
    if systemctl is-active --quiet docker; then
        echo -e "${VERDE}El servicio Docker est√° ${CYAN}ACTIVO y CORRIENDO${VERDE}. ‚úÖ${RESET}"
    else
        echo -e "${ROJO}El servicio Docker est√° ${AMARILLO}INACTIVO o DETENIDO${ROJO}. ‚ùå${RESET}"
    fi
    echo -e "${AZUL}Informaci√≥n detallada del servicio (√∫ltimas l√≠neas del estado):${RESET}"
    safe_execute "systemctl status docker --no-pager" # '--no-pager' evita que 'less' abra la salida.
}

# Inicia el servicio Docker.
start_docker() {
    print_section_header "Iniciar Servicio Docker ‚ñ∂Ô∏è"
    if systemctl is-active --quiet docker; then
        echo -e "${VERDE}El servicio Docker ya est√° corriendo. No es necesario iniciarlo nuevamente. ‚úÖ${RESET}"
    else
        if confirm_action "¬øDeseas iniciar el servicio Docker ahora?"; then
            echo -e "${AZUL}Intentando iniciar el servicio Docker...${RESET}"
            safe_execute "systemctl start docker"
            if [ $? -eq 0 ]; then
                echo -e "${VERDE}Servicio Docker iniciado con √©xito. ¬°Listo para usar! ‚úÖ${RESET}"
            else
                echo -e "${ROJO}Fallo al iniciar el servicio Docker. Esto podr√≠a deberse a errores de configuraci√≥n o recursos insuficientes. Consulta los logs para depurar con 'journalctl -u docker.service'. ‚ùå${RESET}"
            fi
        fi
    fi
}

# Detiene el servicio Docker.
stop_docker() {
    print_section_header "Detener Servicio Docker ‚èπÔ∏è"
    if ! systemctl is-active --quiet docker; then
        echo -e "${VERDE}El servicio Docker ya est√° detenido. No hay nada que detener. ‚úÖ${RESET}"
    else
        if confirm_action "¬øDeseas detener el servicio Docker? Esto detendr√° ${ROJO}todos los contenedores en ejecuci√≥n${RESET} controlados por Docker. Los contenedores no se eliminar√°n, pero dejar√°n de funcionar. üö®"; then
            echo -e "${AZUL}Intentando detener el servicio Docker...${RESET}"
            safe_execute "systemctl stop docker"
            if [ $? -eq 0 ]; then
                echo -e "${VERDE}Servicio Docker detenido con √©xito. ‚úÖ${RESET}"
            else
                echo -e "${ROJO}Fallo al detener el servicio Docker. Intenta forzar la detenci√≥n si es necesario (con 'systemctl stop docker --force') o verifica los logs. ‚ùå${RESET}"
            fi
        fi
    fi
}

# Reinicia el servicio Docker.
restart_docker() {
    print_section_header "Reiniciar Servicio Docker üîÑ"
    if confirm_action "¬øDeseas reiniciar el servicio Docker? Esto detendr√° y luego reiniciar√° ${ROJO}todos los contenedores en ejecuci√≥n${RESET}. Esto puede ser necesario despu√©s de cambios de configuraci√≥n o para resolver problemas."; then
        echo -e "${AZUL}Intentando reiniciar el servicio Docker...${RESET}"
        safe_execute "systemctl restart docker"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Servicio Docker reiniciado con √©xito. ‚úÖ${RESET}"
        else
            echo -e "${ROJO}Fallo al reiniciar el servicio Docker. Verifica los logs para encontrar la causa. ‚ùå${RESET}"
        fi
    fi
}

# Habilita el servicio Docker para que se inicie autom√°ticamente al arrancar el sistema.
enable_docker_on_boot() {
    print_section_header "Habilitar Docker al Inicio del Sistema ‚ö°"
    echo "Habilitar el servicio Docker significa que se iniciar√° autom√°ticamente cada vez que el sistema se arranque."
    if systemctl is-enabled --quiet docker; then
        echo -e "${VERDE}El servicio Docker ya est√° habilitado para iniciar autom√°ticamente en el arranque. ‚úÖ${RESET}"
    else
        if confirm_action "¬øDeseas habilitar el servicio Docker para que se inicie autom√°ticamente en el arranque del sistema?"; then
            echo -e "${AZUL}Habilitando el servicio Docker...${RESET}"
            safe_execute "systemctl enable docker"
            if [ $? -eq 0 ]; then
                echo -e "${VERDE}Servicio Docker habilitado para el inicio autom√°tico. ‚úÖ${RESET}"
            else
                echo -e "${ROJO}Fallo al habilitar el servicio Docker para el inicio. ‚ùå${RESET}"
            fi
        fi
    fi
}

# Deshabilita el servicio Docker para que NO se inicie autom√°ticamente al arrancar el sistema.
disable_docker_on_boot() {
    print_section_header "Deshabilitar Docker al Inicio del Sistema üõë"
    echo "Deshabilitar el servicio Docker significa que NO se iniciar√° autom√°ticamente con el sistema. Tendr√°s que iniciarlo manualmente cada vez que lo necesites."
    if ! systemctl is-enabled --quiet docker; then
        echo -e "${VERDE}El servicio Docker ya est√° deshabilitado para iniciar autom√°ticamente en el arranque. ‚úÖ${RESET}"
    else
        if confirm_action "¬øDeseas deshabilitar el servicio Docker para que NO se inicie autom√°ticamente en el arranque del sistema?"; then
            echo -e "${AZUL}Deshabilitando el servicio Docker...${RESET}"
            safe_execute "systemctl disable docker"
            if [ $? -eq 0 ]; then
                echo -e "${VERDE}Servicio Docker deshabilitado para el inicio autom√°tico. ‚úÖ${RESET}"
            else
                echo -e "${ROJO}Fallo al deshabilitar el servicio Docker para el inicio. ‚ùå${RESET}"
            fi
        fi
    fi
}

# --- FUNCIONES DE GESTI√ìN DE IM√ÅGENES DOCKER ---
list_images() {
    print_section_header "Listar Im√°genes Docker üñºÔ∏è"
    echo "Mostrando todas las im√°genes Docker disponibles en tu sistema. Esto incluye las im√°genes descargadas y las que has construido."
    echo -e "${AZUL}Leyenda:${RESET}"
    echo -e "${CYAN}REPOSITORY:${RESET} Nombre de la imagen."
    echo -e "${CYAN}TAG:${RESET} Etiqueta de la versi√≥n de la imagen."
    echo -e "${CYAN}IMAGE ID:${RESET} Identificador √∫nico de la imagen."
    echo -e "${CYAN}CREATED:${RESET} Cu√°ndo fue creada la imagen."
    echo -e "${CYAN}SIZE:${RESET} Tama√±o de la imagen."
    safe_execute "docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedSince}}\t{{.Size}}'"
    echo -e "${CYAN}Consejo: Las im√°genes con '<none>' en REPOSITORY o TAG son 'dangling images' (im√°genes colgantes) y pueden limpiarse para liberar espacio.${RESET}"
    echo -e "${CYAN}Usa la opci√≥n de limpieza de recursos para gestionarlas.${RESET}"
}

pull_image() {
    print_section_header "Descargar Imagen Docker ‚¨áÔ∏è"
    echo "Descarga una imagen de Docker Hub (por defecto) o de un registro privado. El formato es 'nombre[:tag]'."
    echo "Ejemplos: 'ubuntu:latest', 'nginx', 'myregistry.com/myimage:v1.0'"
    read -p "$(echo -e "${AMARILLO}Introduce el nombre de la imagen a descargar: ${RESET}")" image_name
    if [ -z "$image_name" ]; then
        echo -e "${ROJO}El nombre de la imagen no puede estar vac√≠o. Por favor, introduce un valor v√°lido. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øDeseas descargar la imagen '${image_name}'? Esto puede tardar dependiendo del tama√±o y tu conexi√≥n."; then
        echo -e "${AZUL}Iniciando descarga de la imagen '${image_name}'...${RESET}"
        safe_execute "docker pull $image_name"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Imagen '${image_name}' descargada con √©xito. ‚úÖ${RESET}"
            list_images
        else
            echo -e "${ROJO}Fallo al descargar la imagen '${image_name}'. Verifica el nombre, la etiqueta y tu conexi√≥n. ‚ùå${RESET}"
        fi
    fi
}

remove_image() {
    print_section_header "Eliminar Imagen Docker üóëÔ∏è"
    echo "Elimina una imagen de Docker de tu sistema. ¬°Una vez eliminada, no se puede recuperar f√°cilmente!"
    echo -e "${AMARILLO}ADVERTENCIA: Si la imagen est√° siendo utilizada por contenedores en ejecuci√≥n, Docker te impedir√° eliminarla. Debes detener y eliminar los contenedores primero. Si est√° en uso por contenedores detenidos, se te preguntar√° si quieres forzar la eliminaci√≥n.${RESET}"
    list_images
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o el nombre completo de la imagen a eliminar (ej. 'abc123def456' o 'myimage:latest'): ${RESET}")" image_id
    if [ -z "$image_id" ]; then
        echo -e "${ROJO}El ID/Nombre de la imagen no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øEst√°s seguro de que quieres eliminar la imagen '${image_id}'? Esto no se puede deshacer y puede afectar contenedores que la usen. üö®üí•"; then
        echo -e "${AZUL}Intentando eliminar la imagen '${image_id}'...${RESET}"
        # Utiliza 'docker rmi -f' para forzar la eliminaci√≥n si la imagen no est√° en uso por contenedores en ejecuci√≥n.
        # Sin '-f', Docker arrojar√° un error si hay contenedores detenidos que la usan.
        if safe_execute "docker rmi $image_id"; then
            echo -e "${VERDE}Imagen '${image_id}' eliminada con √©xito. ‚úÖ${RESET}"
            list_images
        else
            echo -e "${ROJO}Fallo al eliminar la imagen '${image_id}'. Aseg√∫rate de que no est√° en uso o intenta la limpieza de recursos. ‚ùå${RESET}"
            echo -e "${CYAN}Si la imagen est√° en uso por un contenedor, deber√°s detener y eliminar el contenedor primero.${RESET}"
        fi
    fi
}

inspect_image() {
    print_section_header "Inspeccionar Imagen Docker üîç"
    echo "Muestra informaci√≥n detallada de bajo nivel (formato JSON) sobre una imagen Docker. Esto incluye su historial, capas, configuraci√≥n de red, vol√∫menes, etc."
    list_images
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre de la imagen a inspeccionar: ${RESET}")" image_id
    if [ -z "$image_id" ]; then
        echo -e "${ROJO}El ID/Nombre de la imagen no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    echo -e "${AZUL}Inspeccionando imagen '${image_id}'...${RESET}"
    safe_execute "docker inspect $image_id"
}

build_image() {
    print_section_header "Construir Imagen Docker (B√°sico) üèóÔ∏è"
    echo "Construye una imagen Docker a partir de un Dockerfile en un directorio (contexto) dado."
    echo -e "${AMARILLO}Aseg√∫rate de que tu Dockerfile se encuentre en el directorio que especifiques como contexto.${RESET}"
    echo "Ejemplo de contexto: './mi_app_docker/' (el punto indica el directorio actual)"
    echo "Ejemplo de nombre de imagen: 'mi-app:latest' o 'mi-backend'"
    read -p "$(echo -e "${AMARILLO}Introduce la ruta al contexto del build (ej. './mi_app_docker/'): ${RESET}")" build_context
    if [ -z "$build_context" ]; then
        echo -e "${ROJO}La ruta del contexto no puede estar vac√≠a. ‚ùå${RESET}"
        return
    fi
    # Normalizar la ruta del contexto para que termine en '/' si es un directorio.
    if [ -d "$build_context" ] && [[ "$build_context" != */ ]]; then
        build_context="${build_context}/"
    fi

    read -p "$(echo -e "${AMARILLO}Introduce el nombre para la nueva imagen (ej. 'mi-app:latest'): ${RESET}")" image_tag
    if [ -z "$image_tag" ]; then
        echo -e "${ROJO}El nombre de la imagen no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øDeseas construir la imagen '${image_tag}' desde el contexto '${build_context}'?"; then
        echo -e "${AZUL}Iniciando la construcci√≥n de la imagen '${image_tag}'...${RESET}"
        safe_execute "docker build -t $image_tag $build_context"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Imagen '${image_tag}' construida con √©xito. ‚úÖ${RESET}"
            list_images
        else
            echo -e "${ROJO}Fallo al construir la imagen. Revisa la salida del comando para errores en tu Dockerfile o en el contexto de la construcci√≥n. ‚ùå${RESET}"
        fi
    fi
}

# --- FUNCIONES DE GESTI√ìN DE CONTENEDORES DOCKER ---
list_containers() {
    print_section_header "Listar Contenedores Docker üì¶"
    echo -e "${AMARILLO}Contenedores Activos (en ejecuci√≥n):${RESET}"
    echo -e "${AZUL}Comando: ${CYAN}docker ps${RESET}"
    safe_execute "docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'"
    echo
    echo -e "${AMARILLO}Todos los Contenedores (incluyendo detenidos, con el tama√±o en disco):${RESET}"
    echo -e "${AZUL}Comando: ${CYAN}docker ps -a -s${RESET}"
    safe_execute "docker ps -a -s --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Size}}\t{{.Ports}}'"
    echo -e "${CYAN}Consejo: La columna 'SIZE' muestra el tama√±o virtual y el tama√±o en disco del contenedor. Los contenedores detenidos a√∫n ocupan espacio.${RESET}"
}

start_container() {
    print_section_header "Iniciar Contenedor Docker ‚ñ∂Ô∏è"
    echo "Inicia uno o m√°s contenedores previamente detenidos."
    list_containers # Muestra los contenedores para que el usuario pueda elegir.
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre del contenedor a iniciar: ${RESET}")" container_id
    if [ -z "$container_id" ]; then
        echo -e "${ROJO}El ID/Nombre de contenedor no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øDeseas iniciar el contenedor '${container_id}'?"; then
        echo -e "${AZUL}Iniciando contenedor '${container_id}'...${RESET}"
        safe_execute "docker start $container_id"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Contenedor '${container_id}' iniciado con √©xito. ‚úÖ${RESET}"
            list_containers
        else
            echo -e "${ROJO}Fallo al iniciar el contenedor '${container_id}'. Verifica si existe o su estado. ‚ùå${RESET}"
        fi
    fi
}

stop_container() {
    print_section_header "Detener Contenedor Docker ‚èπÔ∏è"
    echo "Detiene uno o m√°s contenedores en ejecuci√≥n suavemente. Docker intentar√° detenerlos en 10 segundos por defecto."
    echo -e "${AMARILLO}Si un contenedor no se detiene despu√©s de un tiempo, puedes intentar forzar la detenci√≥n con 'docker kill <ID>' o 'docker stop <ID> --time 1' si el problema persiste.${RESET}"
    list_containers
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre del contenedor a detener: ${RESET}")" container_id
    if [ -z "$container_id" ]; then
        echo -e "${ROJO}El ID/Nombre de contenedor no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øDeseas detener el contenedor '${container_id}'?"; then
        echo -e "${AZUL}Deteniendo contenedor '${container_id}'...${RESET}"
        safe_execute "docker stop $container_id"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Contenedor '${container_id}' detenido con √©xito. ‚úÖ${RESET}"
            list_containers
        else
            echo -e "${ROJO}Fallo al detener el contenedor '${container_id}'. Aseg√∫rate de que est√° corriendo. ‚ùå${RESET}"
        fi
    fi
}

remove_container() {
    print_section_header "Eliminar Contenedor Docker üóëÔ∏è"
    echo "Elimina un contenedor Docker. Un contenedor debe estar detenido para ser eliminado (a menos que uses '-f')."
    echo -e "${ROJO}¬°ADVERTENCIA! Eliminar un contenedor no elimina autom√°ticamente los vol√∫menes de datos asociados a √©l. Esos datos persistir√°n hasta que elimines el volumen expl√≠citamente.${RESET}"
    list_containers
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre del contenedor a eliminar: ${RESET}")" container_id
    if [ -z "$container_id" ]; then
        echo -e "${ROJO}El ID/Nombre de contenedor no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øEst√°s seguro de que quieres eliminar el contenedor '${container_id}'? Esto no se puede deshacer. üö®üí•"; then
        echo -e "${AZUL}Eliminando contenedor '${container_id}'...${RESET}"
        safe_execute "docker rm $container_id"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Contenedor '${container_id}' eliminado con √©xito. ‚úÖ${RESET}"
            list_containers
        else
            echo -e "${ROJO}Fallo al eliminar el contenedor '${container_id}'. Aseg√∫rate de que est√© detenido o usa 'docker rm -f ${container_id}' para forzar la eliminaci√≥n. ‚ùå${RESET}"
            echo -e "${CYAN}Si el contenedor no se elimina, aseg√∫rate de que est√© detenido o usa 'docker rm -f ${container_id}' para forzar (¬°esto tambi√©n detendr√° si est√° en ejecuci√≥n!).${RESET}"
        fi
    fi
}

restart_container() {
    print_section_header "Reiniciar Contenedor Docker üîÑ"
    echo "Detiene y luego inicia un contenedor Docker. Esto es √∫til para aplicar cambios de configuraci√≥n o para refrescar el estado de una aplicaci√≥n."
    list_containers
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre del contenedor a reiniciar: ${RESET}")" container_id
    if [ -z "$container_id" ]; then
        echo -e "${ROJO}El ID/Nombre de contenedor no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øDeseas reiniciar el contenedor '${container_id}'?"; then
        echo -e "${AZUL}Reiniciando contenedor '${container_id}'...${RESET}"
        safe_execute "docker restart $container_id"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Contenedor '${container_id}' reiniciado con √©xito. ‚úÖ${RESET}"
            list_containers
        else
            echo -e "${ROJO}Fallo al reiniciar el contenedor '${container_id}'. Verifica si est√° corriendo o su estado. ‚ùå${RESET}"
        fi
    fi
}

exec_container() {
    print_section_header "Ejecutar Comando en Contenedor üöÄ"
    echo "Ejecuta un comando directamente dentro de un contenedor en ejecuci√≥n. Esto es extremadamente √∫til para depuraci√≥n, instalaci√≥n de paquetes temporales o inspecci√≥n de archivos."
    echo -e "${AMARILLO}Para una sesi√≥n interactiva (como una shell), usa comandos como 'bash' o 'sh'.${RESET}"
    list_containers
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre del contenedor donde quieres ejecutar el comando: ${RESET}")" container_id
    if [ -z "$container_id" ]; then
        echo -e "${ROJO}El ID/Nombre de contenedor no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    read -p "$(echo -e "${AMARILLO}Introduce el comando a ejecutar dentro del contenedor (ej. bash, sh, ls -l /app, python3 --version): ${RESET}")" command_to_exec
    if [ -z "$command_to_exec" ]; then
        echo -e "${ROJO}El comando no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    echo -e "${AZUL}Ejecutando comando en el contenedor '${container_id}'...${RESET}"
    echo -e "${AMARILLO}Se usar√° '-it' para una sesi√≥n interactiva si el comando lo permite (ej. shell).${RESET}"
    safe_execute "docker exec -it $container_id $command_to_exec"
    echo -e "${CYAN}Si el comando no funciona, el contenedor podr√≠a no tener el comando instalado o la ruta es incorrecta.${RESET}"
}

view_container_logs() {
    print_section_header "Ver Logs de Contenedor üìú"
    echo "Muestra los logs de salida est√°ndar (stdout) y de error (stderr) de un contenedor."
    echo "√ötil para depurar aplicaciones dentro de los contenedores."
    list_containers
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre del contenedor para ver sus logs: ${RESET}")" container_id
    if [ -z "$container_id" ]; then
        echo -e "${ROJO}El ID/Nombre de contenedor no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    echo -e "${AZUL}Mostrando logs para el contenedor '${container_id}' (√∫ltimas 50 l√≠neas por defecto).${RESET}"
    echo -e "${CYAN}Puedes ver los logs en tiempo real con '-f' (follow) o ajustar el n√∫mero de l√≠neas con '--tail N'.${RESET}"
    safe_execute "docker logs --tail 50 $container_id"
    if [ $? -ne 0 ]; then
        echo -e "${ROJO}Fallo al obtener los logs. Aseg√∫rate de que el contenedor existe. ‚ùå${RESET}"
    fi
    echo -e "${AMARILLO}Para seguir los logs en tiempo real, puedes usar: ${CYAN}docker logs -f $container_id${RESET}"
    echo -e "${AMARILLO}Para ver todos los logs, omite '--tail': ${CYAN}docker logs $container_id${RESET}"
}

inspect_container() {
    print_section_header "Inspeccionar Contenedor Docker üîç"
    echo "Muestra informaci√≥n detallada de bajo nivel (formato JSON) sobre un contenedor Docker espec√≠fico."
    echo "Esto incluye su configuraci√≥n, estado de red, vol√∫menes montados, procesos, etc."
    list_containers
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre del contenedor a inspeccionar: ${RESET}")" container_id
    if [ -z "$container_id" ]; then
        echo -e "${ROJO}El ID/Nombre de contenedor no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    echo -e "${AZUL}Inspeccionando contenedor '${container_id}'...${RESET}"
    safe_execute "docker inspect $container_id"
    if [ $? -ne 0 ]; then
        echo -e "${ROJO}Fallo al inspeccionar el contenedor. Aseg√∫rate de que el contenedor existe. ‚ùå${RESET}"
    fi
}

# --- FUNCIONES DE GESTI√ìN DE REDES DOCKER ---
list_networks() {
    print_section_header "Listar Redes Docker üåê"
    echo "Muestra todas las redes Docker en tu sistema. Estas redes permiten la comunicaci√≥n entre contenedores y con el host."
    echo -e "${AZUL}Columnas:${RESET}"
    echo -e "${CYAN}NETWORK ID:${RESET} Identificador √∫nico de la red."
    echo -e "${CYAN}NAME:${RESET} Nombre de la red."
    echo -e "${CYAN}DRIVER:${RESET} Driver de la red (bridge, overlay, macvlan, etc.)."
    echo -e "${CYAN}SCOPE:${RESET} √Åmbito de la red (local o swarm)."
    safe_execute "docker network ls --format 'table {{.ID}}\t{{.Name}}\t{{.Driver}}\t{{.Scope}}'"
    echo -e "${CYAN}Las redes 'bridge', 'host', 'none' son redes predeterminadas de Docker. Las redes personalizadas ofrecen un mejor aislamiento.${RESET}"
}

create_network() {
    print_section_header "Crear Red Docker ‚ûï"
    echo "Crea una nueva red personalizada para tus contenedores. Esto mejora el aislamiento y la organizaci√≥n de tus servicios Docker."
    echo "Drivers comunes: 'bridge' (por defecto, para un solo host), 'overlay' (para Docker Swarm en m√∫ltiples hosts), 'macvlan'."
    read -p "$(echo -e "${AMARILLO}Introduce el nombre de la nueva red: ${RESET}")" network_name
    if [ -z "$network_name" ]; then
        echo -e "${ROJO}El nombre de la red no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    read -p "$(echo -e "${AMARILLO}Introduce el driver de la red (ej. bridge, overlay, macvlan - por defecto 'bridge'): ${RESET}")" network_driver
    network_driver=${network_driver:-bridge} # Asigna 'bridge' si la entrada est√° vac√≠a.

    local options=""
    if [[ "$network_driver" == "bridge" ]]; then
        if confirm_action "¬øDeseas especificar un rango de subred y gateway para la red bridge (avanzado)?"; then
            read -p "$(echo -e "${AMARILLO}Introduce la subred en formato CIDR (ej. 172.20.0.0/16): ${RESET}")" subnet
            read -p "$(echo -e "${AMARILLO}Introduce el gateway (ej. 172.20.0.1): ${RESET}")" gateway
            if [ -n "$subnet" ] && [ -n "$gateway" ]; then
                options="--subnet $subnet --gateway $gateway"
                echo -e "${CYAN}La red se crear√° con IPAM personalizado.${RESET}"
            else
                echo -e "${AMARILLO}Subred o gateway vac√≠os, se usar√° la asignaci√≥n autom√°tica.${RESET}"
            fi
        fi
    fi

    if confirm_action "¬øDeseas crear la red '${network_name}' con el driver '${network_driver}' y opciones '${options}'?"; then
        echo -e "${AZUL}Creando red '${network_name}'...${RESET}"
        safe_execute "docker network create --driver $network_driver $options $network_name"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Red '${network_name}' creada con √©xito. ‚úÖ${RESET}"
            list_networks
        else
            echo -e "${ROJO}Fallo al crear la red '${network_name}'. Verifica el nombre, driver o las opciones. ‚ùå${RESET}"
        fi
    fi
}

remove_network() {
    print_section_header "Eliminar Red Docker üóëÔ∏è"
    echo "Elimina una red Docker. Aseg√∫rate de que ning√∫n contenedor est√© conectado a ella antes de eliminarla."
    echo -e "${ROJO}ADVERTENCIA: Eliminar una red en uso puede causar que los contenedores conectados pierdan conectividad y fallen. üö®${RESET}"
    list_networks
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre de la red a eliminar: ${RESET}")" network_id
    if [ -z "$network_id" ]; then
        echo -e "${ROJO}El ID/Nombre de la red no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øEst√°s seguro de que quieres eliminar la red '${network_id}'? Los contenedores conectados a ella podr√≠an perder conectividad. üö®üí•"; then
        echo -e "${AZUL}Eliminando red '${network_id}'...${RESET}"
        safe_execute "docker network rm $network_id"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Red '${network_id}' eliminada con √©xito. ‚úÖ${RESET}"
            list_networks
        else
            echo -e "${ROJO}Fallo al eliminar la red '${network_id}'. Si la red est√° en uso, Docker te lo informar√°. Debes desconectar los contenedores primero. ‚ùå${RESET}"
        fi
    fi
}

inspect_network() {
    print_section_header "Inspeccionar Red Docker üîç"
    echo "Muestra informaci√≥n detallada de bajo nivel (formato JSON) sobre una red Docker espec√≠fica."
    echo "Esto incluye su driver, subred, gateway, contenedores conectados y opciones configuradas."
    list_networks
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el ID o nombre de la red a inspeccionar: ${RESET}")" network_id
    if [ -z "$network_id" ]; then
        echo -e "${ROJO}El ID/Nombre de la red no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    echo -e "${AZUL}Inspeccionando red '${network_id}'...${RESET}"
    safe_execute "docker inspect $network_id"
    if [ $? -ne 0 ]; then
        echo -e "${ROJO}Fallo al inspeccionar la red. Aseg√∫rate de que la red existe. ‚ùå${RESET}"
    fi
}

# --- FUNCIONES DE GESTI√ìN DE VOL√öMENES DOCKER ---
list_volumes() {
    print_section_header "Listar Vol√∫menes Docker üíæ"
    echo "Muestra todos los vol√∫menes Docker. Los vol√∫menes se utilizan para persistir datos generados por los contenedores, desacopl√°ndolos del ciclo de vida del contenedor."
    echo -e "${AZUL}Columnas:${RESET}"
    echo -e "${CYAN}DRIVER:${RESET} Driver del volumen (generalmente 'local')."
    echo -e "${CYAN}VOLUME NAME:${RESET} Nombre del volumen."
    safe_execute "docker volume ls --format 'table {{.Driver}}\t{{.Name}}'"
    echo -e "${CYAN}Consejo: Los vol√∫menes son ideales para datos importantes que no deben perderse al eliminar un contenedor.${RESET}"
}

create_volume() {
    print_section_header "Crear Volumen Docker ‚ûï"
    echo "Crea un nuevo volumen de datos. Este volumen puede ser montado en uno o varios contenedores para almacenar datos persistentes."
    echo -e "${AMARILLO}Los vol√∫menes son la forma preferida de gestionar datos persistentes en Docker.${RESET}"
    read -p "$(echo -e "${AMARILLO}Introduce el nombre del nuevo volumen: ${RESET}")" volume_name
    if [ -z "$volume_name" ]; then
        echo -e "${ROJO}El nombre del volumen no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    local driver_options=""
    if confirm_action "¬øDeseas especificar un driver de volumen diferente (ej. 'local' con opciones) o configuraciones avanzadas?"; then
        read -p "$(echo -e "${AMARILLO}Introduce el driver del volumen (ej. 'local' o un driver de plugin): ${RESET}")" custom_driver
        if [ -n "$custom_driver" ]; then
            driver_options="--driver $custom_driver"
            read -p "$(echo -e "${AMARILLO}Introduce opciones para el driver (ej. 'o=bind,type=nfs,device=:/path' para NFS): ${RESET}")" volume_options
            if [ -n "$volume_options" ]; then
                driver_options+=" -o $volume_options"
            fi
        fi
    fi
    
    if confirm_action "¬øDeseas crear el volumen '${volume_name}' con opciones '${driver_options}'?"; then
        echo -e "${AZUL}Creando volumen '${volume_name}'...${RESET}"
        safe_execute "docker volume create $driver_options $volume_name"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Volumen '${volume_name}' creado con √©xito. ‚úÖ${RESET}"
            list_volumes
        else
            echo -e "${ROJO}Fallo al crear el volumen '${volume_name}'. Verifica el nombre, driver u opciones. ‚ùå${RESET}"
        fi
    fi
}

remove_volume() {
    print_section_header "Eliminar Volumen Docker üóëÔ∏è"
    echo "Elimina un volumen de datos. ¬°Esto es una operaci√≥n destructiva! Los datos almacenados en el volumen se perder√°n PARA SIEMPRE."
    echo -e "${ROJO}¬°ADVERTENCIA CR√çTICA! ASEG√öRATE de que el volumen no contiene datos importantes que necesites. Esta acci√≥n es IRREVERSIBLE. üö®üí•${RESET}"
    list_volumes
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el nombre del volumen a eliminar: ${RESET}")" volume_name
    if [ -z "$volume_name" ]; then
        echo -e "${ROJO}El nombre del volumen no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    if confirm_action "¬øEst√°s ABSOLUTAMENTE seguro de que quieres eliminar el volumen '${volume_name}'? ¬°Los datos se perder√°n PERMANENTEMENTE! (escribe 's' para confirmar) üö®üí•"; then
        echo -e "${AZUL}Eliminando volumen '${volume_name}'...${RESET}"
        safe_execute "docker volume rm $volume_name"
        if [ $? -eq 0 ]; then
            echo -e "${VERDE}Volumen '${volume_name}' eliminado con √©xito. ‚úÖ${RESET}"
            list_volumes
        else
            echo -e "${ROJO}Fallo al eliminar el volumen '${volume_name}'. Si el volumen est√° en uso por un contenedor, Docker te avisar√°. Debes detener y eliminar el contenedor primero. ‚ùå${RESET}"
        fi
    fi
}

inspect_volume() {
    print_section_header "Inspeccionar Volumen Docker üîç"
    echo "Muestra informaci√≥n detallada de bajo nivel (formato JSON) sobre un volumen Docker espec√≠fico."
    echo "Esto incluye su driver, ruta de montaje en el host, etiquetas y opciones."
    list_volumes
    echo
    read -p "$(echo -e "${AMARILLO}Introduce el nombre del volumen a inspeccionar: ${RESET}")" volume_name
    if [ -z "$volume_name" ]; then
        echo -e "${ROJO}El nombre del volumen no puede estar vac√≠o. ‚ùå${RESET}"
        return
    fi
    echo -e "${AZUL}Inspeccionando volumen '${volume_name}'...${RESET}"
    safe_execute "docker inspect $volume_name"
    if [ $? -ne 0 ]; then
        echo -e "${ROJO}Fallo al inspeccionar el volumen. Aseg√∫rate de que el volumen existe. ‚ùå${RESET}"
    fi
}

# --- Limpieza de Recursos Docker ---
prune_docker() {
    print_section_header "Limpieza de Recursos Docker üßπ"
    echo "Esta secci√≥n te ayuda a liberar espacio en disco eliminando recursos Docker no utilizados."
    echo -e "${AMARILLO}¬°CUIDADO! Algunas operaciones de limpieza son irreversibles y pueden eliminar datos.${RESET}"
    echo
    echo "1.  Limpiar TODOS los recursos no utilizados (contenedores detenidos, im√°genes sin etiqueta o no referenciadas, redes no usadas, vol√∫menes no usados y cach√© de build). üö® (docker system prune -a --volumes)"
    echo "2.  Limpiar solo contenedores detenidos. (docker container prune)"
    echo "3.  Limpiar solo im√°genes no utilizadas (pendientes y sin referencia). (docker image prune -a)"
    echo "4.  Limpiar solo vol√∫menes no utilizados (¬°MUCHO CUIDADO! Esto puede eliminar datos de forma permanente). (docker volume prune)"
    echo "5.  Limpiar solo redes no utilizadas. (docker network prune)"
    echo "0.  Volver al men√∫ anterior."

    read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de limpieza: ${RESET}")" prune_choice
    echo

    case $prune_choice in
        1)
            if confirm_action "¬øEst√°s ABSOLUTAMENTE seguro de que quieres limpiar TODOS los recursos Docker no utilizados, incluyendo vol√∫menes (docker system prune -a --volumes)? Esto es irreversible y eliminar√° muchos datos no usados. üö®üí•"; then
                echo -e "${AZUL}Ejecutando limpieza total...${RESET}"
                safe_execute "docker system prune -a --volumes"
                echo -e "${VERDE}Limpieza total de Docker completada. ‚úÖ${RESET}"
            fi
            ;;
        2)
            if confirm_action "¬øDeseas limpiar solo contenedores detenidos? (docker container prune) (No se eliminar√°n los datos asociados a los vol√∫menes)"; then
                echo -e "${AZUL}Limpiando contenedores detenidos...${RESET}"
                safe_execute "docker container prune"
                echo -e "${VERDE}Contenedores detenidos limpiados. ‚úÖ${RESET}"
            fi
            ;;
        3)
            if confirm_action "¬øDeseas limpiar solo im√°genes no utilizadas? (docker image prune -a) (Im√°genes sin etiquetas y sin referencia por contenedores)"; then
                echo -e "${AZUL}Limpiando im√°genes no utilizadas...${RESET}"
                safe_execute "docker image prune -a" # '-a' para todas las im√°genes no usadas (incluye dangling y no referenciadas)
                echo -e "${VERDE}Im√°genes no utilizadas limpiadas. ‚úÖ${RESET}"
            fi
            ;;
        4)
            if confirm_action "¬øDeseas limpiar solo vol√∫menes no utilizados? ${ROJO}¬°ADVERTENCIA: Esto puede eliminar datos IMPORTANTES y es IRREVERSIBLE! (docker volume prune) ${RESET}"; then
                echo -e "${AZUL}Limpiando vol√∫menes no utilizados...${RESET}"
                safe_execute "docker volume prune"
                echo -e "${VERDE}Vol√∫menes no utilizados limpiados. ‚úÖ${RESET}"
            fi
            ;;
        5)
            if confirm_action "¬øDeseas limpiar solo redes no utilizadas? (docker network prune)"; then
                echo -e "${AZUL}Limpiando redes no utilizadas...${RESET}"
                safe_execute "docker network prune"
                echo -e "${VERDE}Redes no utilizadas limpiadas. ‚úÖ${RESET}"
            fi
            ;;
        0)
            echo -e "${AZUL}Volviendo al men√∫ de gesti√≥n principal. ‚úÖ${RESET}"
            ;;
        *)
            echo -e "${ROJO}Opci√≥n inv√°lida. Por favor, selecciona un n√∫mero del men√∫. üòï${RESET}"
            ;;
    esac
}

# --- Informaci√≥n y Diagn√≥stico del Sistema Docker ---
docker_version() {
    print_section_header "Versi√≥n de Docker üè∑Ô∏è"
    echo "Muestra informaci√≥n de la versi√≥n del cliente (CLI) y del servidor (Daemon) Docker."
    echo -e "${CYAN}Cliente: Versi√≥n de la interfaz de l√≠nea de comandos de Docker.${RESET}"
    echo -e "${CYAN}Servidor: Versi√≥n del motor Docker que gestiona los contenedores.${RESET}"
    safe_execute "docker version"
}

docker_info() {
    print_section_header "Informaci√≥n del Sistema Docker Detallada üî¨"
    echo "Muestra informaci√≥n detallada sobre la instalaci√≥n de Docker, almacenamiento, redes, contenedores en ejecuci√≥n, estad√≠sticas del host, etc."
    echo -e "${CYAN}√ötil para el diagn√≥stico de problemas a nivel de sistema Docker y para entender la configuraci√≥n actual.${RESET}"
    safe_execute "docker info"
}

view_docker_logs() {
    print_section_header "Ver Logs del Daemon Docker üìú"
    echo "Muestra los logs del servicio Docker (el daemon que gestiona contenedores, im√°genes, etc.)."
    echo "Estos logs son cruciales para depurar problemas de inicio del servicio, errores de red o fallos inesperados."
    echo -e "${AZUL}Mostrando las √∫ltimas 100 l√≠neas de los logs del daemon Docker (usando systemd journal, si est√° disponible):${RESET}"
    # '--since' muestra logs desde un per√≠odo de tiempo. '--no-pager' evita el paginador.
    # 'tail -n 100' asegura que solo se muestren las √∫ltimas 100 l√≠neas.
    safe_execute "journalctl -u docker.service --since '1 hour ago' --no-pager | tail -n 100"
    if [ $? -ne 0 ]; then
        echo -e "${ROJO}No se pudieron obtener los logs del servicio Docker. Aseg√∫rate de que systemd est√° en uso y que tienes permisos. ‚ùå${RESET}"
    fi
    echo -e "${AMARILLO}Para seguir los logs en tiempo real, usa: ${CYAN}journalctl -u docker.service -f${RESET}"
    echo -e "${AMARILLO}Para ver logs desde el inicio del sistema: ${CYAN}journalctl -u docker.service --boot${RESET}"
}

view_docker_events() {
    print_section_header "Ver Eventos de Docker en Tiempo Real üì°"
    echo "Muestra un flujo continuo de eventos del daemon Docker en tiempo real (creaci√≥n/inicio/detenci√≥n de contenedores, descarga de im√°genes, etc.)."
    echo -e "${AMARILLO}Presiona ${ROJO}Ctrl+C${AMARILLO} para detener la visualizaci√≥n de eventos.${RESET}"
    echo -e "${AZUL}Iniciando el monitoreo de eventos de Docker...${RESET}"
    safe_execute "docker events"
    if [ $? -ne 0 ]; then
        echo -e "${ROJO}Fallo al iniciar el monitoreo de eventos. Aseg√∫rate de que el servicio Docker est√° corriendo. ‚ùå${RESET}"
    fi
}

docker_system_df() {
    print_section_header "Espacio en Disco Usado por Docker üìä"
    echo "Muestra el uso de espacio en disco de las im√°genes, contenedores, vol√∫menes y cach√© de buildkit de Docker."
    echo -e "${CYAN}Esto es √∫til para identificar d√≥nde se est√° consumiendo m√°s espacio en tu sistema Docker.${RESET}"
    safe_execute "docker system df"
}

# --- Configuraci√≥n del Daemon Docker (daemon.json) ---
manage_daemon_config() {
    print_section_header "Gestionar Configuraci√≥n del Daemon Docker (daemon.json) ‚öôÔ∏è"
    echo "Este men√∫ te permite ver y modificar el archivo de configuraci√≥n clave del daemon Docker, daemon.json."
    echo -e "${ROJO}¬°ADVERTENCIA! Cambios incorrectos en daemon.json pueden impedir que Docker se inicie. Siempre haz una copia de seguridad.${RESET}"
    echo "El archivo se encuentra en: ${CYAN}${DOCKER_DAEMON_JSON_FILE}${RESET}"
    echo

    if [ ! -d "$DOCKER_DAEMON_CONFIG_DIR" ]; then
        echo -e "${AMARILLO}El directorio de configuraci√≥n del daemon '${DOCKER_DAEMON_CONFIG_DIR}' no existe. Cre√°ndolo...${RESET}"
        safe_execute "mkdir -p $DOCKER_DAEMON_CONFIG_DIR" || { echo -e "${ROJO}No se pudo crear el directorio de configuraci√≥n. Permisos? ‚ùå${RESET}"; return; }
    fi

    local current_config=""
    if [ -f "$DOCKER_DAEMON_JSON_FILE" ]; then
        current_config=$(cat "$DOCKER_DAEMON_JSON_FILE")
        echo -e "${AZUL}Contenido actual de ${DOCKER_DAEMON_JSON_FILE}: ${RESET}"
        echo -e "${CYAN}${current_config}${RESET}"
    else
        echo -e "${AMARILLO}El archivo ${DOCKER_DAEMON_JSON_FILE} no existe. Se crear√° si eliges editarlo o a√±adir configuraciones.${RESET}"
    fi
    echo

    echo "1.  Ver contenido actual de daemon.json."
    echo "2.  Editar daemon.json manualmente (abrir√° un editor de texto). üìù"
    echo "3.  A√±adir/Modificar una configuraci√≥n espec√≠fica (ej. 'data-root', 'log-driver')."
    echo "4.  Eliminar una configuraci√≥n espec√≠fica."
    echo "5.  Reiniciar Docker para aplicar cambios."
    echo "0.  Volver al men√∫ principal."

    read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de configuraci√≥n del daemon: ${RESET}")" daemon_choice
    echo

    case $daemon_choice in
        1)
            if [ -f "$DOCKER_DAEMON_JSON_FILE" ]; then
                echo -e "${AZUL}Contenido de ${DOCKER_DAEMON_JSON_FILE}: ${RESET}"
                safe_execute "cat $DOCKER_DAEMON_JSON_FILE"
            else
                echo -e "${AMARILLO}El archivo ${DOCKER_DAEMON_JSON_FILE} no existe. ${RESET}"
            fi
            ;;
        2)
            if confirm_action "¬øDeseas editar daemon.json? Se abrir√° nano. ¬°Guarda y cierra para aplicar!"; then
                # Crear copia de seguridad antes de editar.
                local BACKUP_FILE="${DOCKER_DAEMON_JSON_FILE}.bak.$(date +%Y%m%d%H%M%S)"
                if [ -f "$DOCKER_DAEMON_JSON_FILE" ]; then
                    safe_execute "cp $DOCKER_DAEMON_JSON_FILE $BACKUP_FILE"
                    if [ $? -eq 0 ]; then
                        echo -e "${VERDE}Copia de seguridad creada: ${BACKUP_FILE} ‚úÖ${RESET}"
                    else
                        echo -e "${ROJO}No se pudo crear la copia de seguridad. Procediendo con la edici√≥n sin copia. ‚ùå${RESET}"
                    fi
                else
                    echo -e "${AMARILLO}El archivo no existe, se crear√°. No se requiere copia de seguridad.${RESET}"
                fi

                # Abrir el editor. 'nano' es com√∫n y f√°cil de usar.
                safe_execute "nano $DOCKER_DAEMON_JSON_FILE"
                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Edici√≥n de daemon.json completada. ‚úÖ${RESET}"
                    echo -e "${AMARILLO}¬°Recuerda reiniciar el servicio Docker para aplicar los cambios!${RESET}"
                else
                    echo -e "${ROJO}El editor termin√≥ con un error. Revisa el archivo manualmente. ‚ùå${RESET}"
                fi
            fi
            ;;
        3)
            echo "Puedes a√±adir o modificar una clave-valor en el JSON."
            echo "Ejemplos: 'data-root' '/mnt/docker-data', 'log-driver' 'json-file', 'registry-mirrors' '[\"https://my.mirror.com\"]'"
            read -p "$(echo -e "${AMARILLO}Introduce la clave (ej. 'data-root'): ${RESET}")" json_key
            read -p "$(echo -e "${AMARILLO}Introduce el valor (ej. '/var/lib/docker-new' o '[\"https://my.mirror.com\"]'): ${RESET}")" json_value
            if [ -z "$json_key" ] || [ -z "$json_value" ]; then
                echo -e "${ROJO}Clave o valor no pueden estar vac√≠os. ‚ùå${RESET}"
                return
            fi
            if confirm_action "¬øDeseas a√±adir/modificar '${json_key}' con valor '${json_value}' en daemon.json?"; then
                local BACKUP_FILE="${DOCKER_DAEMON_JSON_FILE}.bak.$(date +%Y%m%d%H%M%S)"
                if [ -f "$DOCKER_DAEMON_JSON_FILE" ]; then
                    safe_execute "cp $DOCKER_DAEMON_JSON_FILE $BACKUP_FILE"
                    echo -e "${VERDE}Copia de seguridad creada: ${BACKUP_FILE} ‚úÖ${RESET}"
                fi
                
                # Usar jq para modificar/a√±adir la clave. Instalar jq si no est√°.
                if ! command -v jq &>/dev/null; then
                    echo -e "${AMARILLO}La herramienta 'jq' no est√° instalada. Es necesaria para modificar JSON autom√°ticamente. Instal√°ndola...${RESET}"
                    local distro=$(get_distribution)
                    if [[ "$distro" == "debian" || "$distro" == "ubuntu" ]]; then
                        safe_execute "apt install -y jq"
                    elif [[ "$distro" == "fedora" || "$distro" == "centos" || "$distro" == "rhel" ]]; then
                        safe_execute "dnf install -y jq"
                    else
                        echo -e "${ROJO}No se puede instalar 'jq' autom√°ticamente para esta distribuci√≥n. Por favor, inst√°lalo manualmente. ‚ùå${RESET}"
                        return
                    fi
                fi

                if [ ! -f "$DOCKER_DAEMON_JSON_FILE" ]; then
                    # Si el archivo no existe, crearlo con un JSON vac√≠o.
                    echo "{}" | safe_execute "tee $DOCKER_DAEMON_JSON_FILE" >/dev/null
                fi

                # Intentar a√±adir/modificar usando jq.
                # Si el valor es un array JSON (empieza con '['), jq lo tratar√° como tal.
                # Si no, lo tratar√° como string.
                if [[ "$json_value" == \[*\] ]]; then
                    safe_execute "jq --arg key \"$json_key\" --argjson value \"$json_value\" '.[$key] = $value' $DOCKER_DAEMON_JSON_FILE > temp_daemon.json && mv temp_daemon.json $DOCKER_DAEMON_JSON_FILE"
                else
                    safe_execute "jq --arg key \"$json_key\" --arg value \"$json_value\" '.[$key] = $value' $DOCKER_DAEMON_JSON_FILE > temp_daemon.json && mv temp_daemon.json $DOCKER_DAEMON_JSON_FILE"
                fi

                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Configuraci√≥n de daemon.json actualizada. ‚úÖ${RESET}"
                    echo -e "${AMARILLO}¬°Reinicia el servicio Docker para que los cambios surtan efecto!${RESET}"
                else
                    echo -e "${ROJO}Fallo al actualizar daemon.json. Revisa el formato de la clave/valor y el archivo. ‚ùå${RESET}"
                    # Revertir desde la copia de seguridad si hubo fallo y se hizo copia.
                    if [ -f "$BACKUP_FILE" ]; then
                        echo -e "${AMARILLO}Intentando restaurar la copia de seguridad...${RESET}"
                        safe_execute "mv $BACKUP_FILE $DOCKER_DAEMON_JSON_FILE"
                        echo -e "${VERDE}Copia de seguridad restaurada. ‚úÖ${RESET}"
                    fi
                fi
            fi
            ;;
        4)
            echo "Puedes eliminar una clave espec√≠fica de daemon.json."
            read -p "$(echo -e "${AMARILLO}Introduce la clave a eliminar (ej. 'data-root'): ${RESET}")" json_key_to_delete
            if [ -z "$json_key_to_delete" ]; then
                echo -e "${ROJO}La clave no puede estar vac√≠a. ‚ùå${RESET}"
                return
            fi
            if confirm_action "¬øDeseas eliminar la clave '${json_key_to_delete}' de daemon.json?"; then
                local BACKUP_FILE="${DOCKER_DAEMON_JSON_FILE}.bak.$(date +%Y%m%d%H%M%S)"
                if [ -f "$DOCKER_DAEMON_JSON_FILE" ]; then
                    safe_execute "cp $DOCKER_DAEMON_JSON_FILE $BACKUP_FILE"
                    echo -e "${VERDE}Copia de seguridad creada: ${BACKUP_FILE} ‚úÖ${RESET}"
                else
                    echo -e "${AMARILLO}El archivo daemon.json no existe. Nada que eliminar.${RESET}"
                    return
                fi
                
                if ! command -v jq &>/dev/null; then
                    echo -e "${ROJO}La herramienta 'jq' no est√° instalada y es necesaria. Por favor, inst√°lala manualmente. ‚ùå${RESET}"
                    return
                fi

                safe_execute "jq 'del(.\"$json_key_to_delete\")' $DOCKER_DAEMON_JSON_FILE > temp_daemon.json && mv temp_daemon.json $DOCKER_DAEMON_JSON_FILE"
                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Clave '${json_key_to_delete}' eliminada de daemon.json. ‚úÖ${RESET}"
                    echo -e "${AMARILLO}¬°Reinicia el servicio Docker para que los cambios surtan efecto!${RESET}"
                else
                    echo -e "${ROJO}Fallo al eliminar la clave de daemon.json. Revisa si la clave existe. ‚ùå${RESET}"
                    if [ -f "$BACKUP_FILE" ]; then
                        echo -e "${AMARILLO}Intentando restaurar la copia de seguridad...${RESET}"
                        safe_execute "mv $BACKUP_FILE $DOCKER_DAEMON_JSON_FILE"
                        echo -e "${VERDE}Copia de seguridad restaurada. ‚úÖ${RESET}"
                    fi
                fi
            fi
            ;;
        5)
            restart_docker # Llama a la funci√≥n de reinicio del servicio Docker.
            ;;
        0)
            echo -e "${AZUL}Volviendo al men√∫ de gesti√≥n principal. ‚úÖ${RESET}"
            ;;
        *)
            echo -e "${ROJO}Opci√≥n inv√°lida. Por favor, selecciona un n√∫mero del men√∫. üòï${RESET}"
            ;;
    esac
}

# --- Actualizaci√≥n y Desinstalaci√≥n de Docker ---
update_docker() {
    print_section_header "Actualizar Docker ‚¨ÜÔ∏è"
    echo "Actualizar Docker generalmente implica usar el gestor de paquetes de tu sistema para obtener las √∫ltimas versiones de los componentes de Docker CE."
    echo -e "${AMARILLO}Se recomienda reiniciar el servicio Docker despu√©s de una actualizaci√≥n para asegurar que los nuevos binarios se carguen. üîÑ${RESET}"
    local distro=$(get_distribution)
    case "$distro" in
        "debian" | "ubuntu")
            echo -e "${AZUL}Se actualizar√° Docker utilizando APT.${RESET}"
            if confirm_action "¬øDeseas actualizar Docker CE (Engine, CLI, containerd, plugins) ahora?"; then
                echo -e "${AZUL}Ejecutando 'apt update && apt upgrade'...${RESET}"
                safe_execute "apt update && apt upgrade -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Docker se ha actualizado (posiblemente). ‚úÖ${RESET}"
                    if confirm_action "¬øDeseas reiniciar el servicio Docker ahora para aplicar los cambios?"; then
                        restart_docker # Llama a la funci√≥n de reinicio.
                    fi
                else
                    echo -e "${ROJO}Fallo al actualizar Docker. Revisa los mensajes de error. ‚ùå${RESET}"
                fi
            fi
            ;;
        "fedora" | "centos" | "rhel" | "almalinux" | "rocky")
            echo -e "${AZUL}Se actualizar√° Docker utilizando DNF.${RESET}"
            if confirm_action "¬øDeseas actualizar Docker CE (Engine, CLI, containerd, plugins) ahora?"; then
                echo -e "${AZUL}Ejecutando 'dnf update'...${RESET}"
                safe_execute "dnf update -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Docker se ha actualizado (posiblemente). ‚úÖ${RESET}"
                    if confirm_action "¬øDeseas reiniciar el servicio Docker ahora para aplicar los cambios?"; then
                        restart_docker # Llama a la funci√≥n de reinicio.
                    fi
                else
                    echo -e "${ROJO}Fallo al actualizar Docker. Revisa los mensajes de error. ‚ùå${RESET}"
                fi
            fi
            ;;
        *)
            echo -e "${ROJO}Tu distribuci√≥n ('$distro') no es compatible con la actualizaci√≥n automatizada a trav√©s de este script. üòû${RESET}"
            echo -e "${AMARILLO}Consulta la documentaci√≥n oficial de Docker para tu distribuci√≥n para los pasos de actualizaci√≥n manual.${RESET}"
            ;;
    esac
}

uninstall_docker() {
    print_section_header "Desinstalar Docker Completamente üóëÔ∏è"
    echo -e "${ROJO}¬°ADVERTENCIA CR√çTICA! Esta operaci√≥n es DESTRUCTIVA e IRREVERSIBLE.${RESET}"
    echo "Eliminar√° Docker Engine, CLI, containerd, y ${ROJO}todos tus contenedores, im√°genes, vol√∫menes y redes Docker por defecto${RESET}."
    echo "Aseg√∫rate de haber hecho copias de seguridad de cualquier dato importante en tus vol√∫menes antes de proceder."
    echo
    if confirm_action "¬øEst√°s ABSOLUTAMENTE SEGURO de que quieres DESINSTALAR Docker y eliminar todos sus datos (incluyendo contenedores, im√°genes y vol√∫menes)? (escribe 's' para confirmar) üö®üí•"; then
        echo -e "${AMARILLO}Paso previo opcional: Limpiando todos los recursos Docker antes de desinstalar para una limpieza m√°s completa.${RESET}"
        if confirm_action "¬øDeseas ejecutar 'docker system prune -a --volumes' (limpieza total) ahora como precauci√≥n antes de desinstalar?"; then
            prune_docker # Invoca la funci√≥n de limpieza que ofrece opciones
            echo -e "${AZUL}Continuando con la desinstalaci√≥n de Docker...${RESET}"
        else
            echo -e "${AMARILLO}Saltando la limpieza de recursos previa. Ten en cuenta que podr√≠an quedar m√°s remanentes.${RESET}"
        fi

        local distro=$(get_distribution)
        case "$distro" in
            "debian" | "ubuntu")
                echo -e "${AZUL}Deteniendo el servicio Docker...${RESET}"
                safe_execute "systemctl stop docker"
                echo -e "${AZUL}Desinstalando paquetes principales de Docker (docker-ce, docker-ce-cli, containerd.io, plugins)...${RESET}"
                safe_execute "apt purge -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
                echo -e "${AZUL}Eliminando directorios de datos y configuraci√≥n residuales (/var/lib/docker, /etc/docker, /var/lib/containerd)...${RESET}"
                safe_execute "rm -rf /var/lib/docker"
                safe_execute "rm -rf /etc/docker"
                safe_execute "rm -rf /var/lib/containerd"
                echo -e "${AZUL}Eliminando archivos de repositorio y claves GPG de Docker...${RESET}"
                safe_execute "rm -f /etc/apt/sources.list.d/docker.list"
                safe_execute "rm -f /etc/apt/keyrings/docker.gpg"
                echo -e "${AZUL}Limpiando paquetes residuales y dependencias no usadas...${RESET}"
                safe_execute "apt autoremove -y"
                safe_execute "apt clean"
                ;;
            "fedora" | "centos" | "rhel" | "almalinux" | "rocky")
                echo -e "${AZUL}Deteniendo el servicio Docker...${RESET}"
                safe_execute "systemctl stop docker"
                echo -e "${AZUL}Desinstalando paquetes principales de Docker...${RESET}"
                safe_execute "dnf remove -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
                echo -e "${AZUL}Eliminando directorios de datos y configuraci√≥n residuales (/var/lib/docker, /etc/docker, /var/lib/containerd)...${RESET}"
                safe_execute "rm -rf /var/lib/docker"
                safe_execute "rm -rf /etc/docker"
                safe_execute "rm -rf /var/lib/containerd"
                echo -e "${AZUL}Eliminando archivos de repositorio de Docker...${RESET}"
                safe_execute "rm -f /etc/yum.repos.d/docker-ce.repo"
                ;;
            *)
                echo -e "${ROJO}Tu distribuci√≥n ('$distro') no es compatible con la desinstalaci√≥n automatizada a trav√©s de este script. üòû${RESET}"
                echo -e "${AMARILLO}Consulta la documentaci√≥n oficial de Docker para tu distribuci√≥n para los pasos de desinstalaci√≥n manual.${RESET}"
                ;;
        esac
        echo -e "${VERDE}Desinstalaci√≥n de Docker completada (o al menos sus componentes principales). ‚úÖ${RESET}"
        echo -e "${AMARILLO}Se recomienda ${ROJO}reiniciar tu sistema${AMARILLO} para una limpieza completa de cualquier componente en memoria o archivos bloqueados y para remover cualquier dependencia residual de Docker. üîÑ${RESET}"
    fi
}

# --- Gesti√≥n de Docker Compose (Standalone, no plugin) ---
install_docker_compose_standalone() {
    print_section_header "Instalar Docker Compose (Standalone) üì¶"
    echo "Docker Compose ahora viene como un plugin CLI con la mayor√≠a de las instalaciones modernas de Docker CE (se usa el comando 'docker compose' con espacio)."
    echo "Esta opci√≥n es para instalar la versi√≥n binaria standalone (generalmente escrita en Python) de Docker Compose ('docker-compose' con guion)."
    echo "Versi√≥n de Docker Compose Standalone a instalar: ${CYAN}${DOCKER_COMPOSE_VERSION}${RESET}"
    echo -e "${AMARILLO}Considera usar el plugin 'docker compose' si ya est√° disponible en tu instalaci√≥n de Docker CE.${RESET}"

    local compose_type=$(detect_docker_compose_type)
    if [ "$compose_type" = "plugin" ]; then
        echo -e "${VERDE}Ya tienes 'docker compose' (plugin) disponible. Es la forma recomendada de usar Compose. ‚úÖ${RESET}"
        if ! confirm_action "¬øA√∫n as√≠ quieres instalar la versi√≥n standalone (${DOCKER_COMPOSE_VERSION})? Esto podr√≠a crear un comando 'docker-compose' adicional.${RESET}"; then
            return # El usuario ha cancelado la instalaci√≥n.
        fi
    elif [ "$compose_type" = "standalone" ]; then
        local installed_version=$("$DOCKER_COMPOSE_DEST" version --short 2>/dev/null)
        echo -e "${VERDE}Docker Compose (standalone) ya est√° instalado. Versi√≥n actual: ${CYAN}${installed_version}${VERDE}. ‚úÖ${RESET}"
        if [ "$installed_version" == "${DOCKER_COMPOSE_VERSION}" ]; then
            echo -e "${VERDE}Ya tienes la versi√≥n ${DOCKER_COMPOSE_VERSION} instalada. No es necesario reinstalar. ${RESET}"
            return # Salir, no hay nada que hacer.
        elif ! confirm_action "¬øQuieres actualizar/reinstalar Docker Compose a la versi√≥n ${DOCKER_COMPOSE_VERSION}?"; then
            return # El usuario ha cancelado la actualizaci√≥n.
        fi
    fi

    if confirm_action "¬øProceder con la descarga e instalaci√≥n de Docker Compose Standalone (${DOCKER_COMPOSE_VERSION})?"; then
        echo -e "${AZUL}Descargando Docker Compose desde GitHub...${RESET}"
        safe_execute "curl -L ${DOCKER_COMPOSE_URL} -o ${DOCKER_COMPOSE_DEST}" || { echo -e "${ROJO}Fallo al descargar Docker Compose. Verifica la URL y tu conexi√≥n. ${RESET}"; return 1; }
        
        echo -e "${AZUL}Dando permisos de ejecuci√≥n al binario...${RESET}"
        safe_execute "chmod +x ${DOCKER_COMPOSE_DEST}" || { echo -e "${ROJO}Fallo al establecer permisos de ejecuci√≥n.${RESET}"; return 1; }

        echo -e "${VERDE}Docker Compose (standalone) instalado correctamente en '${DOCKER_COMPOSE_DEST}'. ‚úÖ${RESET}"
        echo -e "${CYAN}Puedes verificar la instalaci√≥n con: ${VERDE}docker-compose --version${RESET}"
        echo -e "${AMARILLO}Recuerda que para Docker Compose moderno, la mayor√≠a de los comandos se ejecutan con 'docker compose' (con espacio).${RESET}"
    fi
}

manage_docker_compose_project() {
    print_section_header "Gesti√≥n B√°sica de Proyectos Docker Compose üèóÔ∏è"
    local compose_cmd # Variable para almacenar el comando correcto de Docker Compose.
    local compose_type=$(detect_docker_compose_type)

    if [ "$compose_type" = "plugin" ]; then
        compose_cmd="docker compose" # Usa el plugin.
        echo -e "${VERDE}Usando el plugin Docker Compose (comando: '${CYAN}docker compose${VERDE}'). ‚úÖ${RESET}"
    elif [ "$compose_type" = "standalone" ]; then
        compose_cmd="docker-compose" # Usa la versi√≥n standalone.
        echo -e "${VERDE}Usando la versi√≥n standalone de Docker Compose (comando: '${CYAN}docker-compose${VERDE}'). ‚úÖ${RESET}"
    else
        echo -e "${ROJO}Docker Compose no est√° instalado. Por favor, inst√°lalo primero desde la opci√≥n anterior. ‚ùå${RESET}"
        return # Sale de la funci√≥n si Compose no est√° disponible.
    fi

    echo "Este submen√∫ te permite realizar acciones b√°sicas en tus proyectos de Docker Compose."
    echo -e "${AMARILLO}¬°IMPORTANTE! Debes ejecutar estas acciones ${ROJO}desde el directorio donde se encuentra tu archivo ${CYAN}docker-compose.yml${AMARILLO} (o .yaml).${RESET}"
    echo "Si no est√°s en el directorio correcto, los comandos pueden fallar o no encontrar tus servicios."
    echo "Tu directorio actual es: ${CYAN}$(pwd)${RESET}"
    echo
    echo "1.  Levantar servicios (construir, crear, iniciar - en segundo plano: ${CYAN}$compose_cmd up -d${RESET})"
    echo "2.  Detener y eliminar servicios (contenedores, redes - ${CYAN}$compose_cmd down${RESET})"
    echo "3.  Listar servicios de un proyecto (estado de contenedores: ${CYAN}$compose_cmd ps${RESET})"
    echo "4.  Ver logs de todos los servicios de un proyecto (${CYAN}$compose_cmd logs${RESET})"
    echo "5.  Construir/Reconstruir im√°genes (sin levantar servicios: ${CYAN}$compose_cmd build${RESET})"
    echo "6.  Ejecutar un comando en un servicio (ej. ${CYAN}$compose_cmd exec web bash${RESET})"
    echo "0.  Volver al men√∫ anterior"

    read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de Docker Compose: ${RESET}")" dc_choice
    echo

    case $dc_choice in
        1)
            if confirm_action "¬øDeseas levantar los servicios definidos en docker-compose.yml (en modo detached -d)?"; then
                echo -e "${AZUL}Levantando servicios Docker Compose...${RESET}"
                safe_execute "$compose_cmd up -d"
                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Servicios levantados con √©xito. ‚úÖ${RESET}"
                else
                    echo -e "${ROJO}Fallo al levantar los servicios. Revisa la salida para depurar tu archivo docker-compose.yml. ‚ùå${RESET}"
                fi
            fi
            ;;
        2)
            if confirm_action "¬øDeseas detener y eliminar los servicios, redes, etc. definidos en docker-compose.yml? ${ROJO}Esto detendr√° y remover√° tus contenedores.${RESET}"; then
                echo -e "${AZUL}Deteniendo y eliminando servicios Docker Compose...${RESET}"
                safe_execute "$compose_cmd down"
                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Servicios detenidos y eliminados con √©xito. ‚úÖ${RESET}"
                else
                    echo -e "${ROJO}Fallo al detener los servicios. ‚ùå${RESET}"
                fi
            fi
            ;;
        3)
            echo -e "${AZUL}Listando servicios del proyecto Docker Compose...${RESET}"
            safe_execute "$compose_cmd ps"
            ;;
        4)
            echo -e "${AZUL}Mostrando logs de todos los servicios del proyecto Docker Compose...${RESET}"
            safe_execute "$compose_cmd logs"
            echo -e "${AMARILLO}Para seguir los logs en tiempo real, usa: ${CYAN}$compose_cmd logs -f${RESET}"
            ;;
        5)
            if confirm_action "¬øDeseas construir/reconstruir las im√°genes definidas en docker-compose.yml?"; then
                echo -e "${AZUL}Construyendo im√°genes Docker Compose...${RESET}"
                safe_execute "$compose_cmd build"
                if [ $? -eq 0 ]; then
                    echo -e "${VERDE}Im√°genes construidas con √©xito. ‚úÖ${RESET}"
                else
                    echo -e "${ROJO}Fallo al construir las im√°genes. Revisa tu Dockerfile o docker-compose.yml. ‚ùå${RESET}"
                fi
            fi
            ;;
        6)
            echo "Ejecuta un comando dentro de un servicio espec√≠fico de tu proyecto Docker Compose."
            read -p "$(echo -e "${AMARILLO}Introduce el nombre del servicio (ej. 'web', 'db'): ${RESET}")" service_name
            read -p "$(echo -e "${AMARILLO}Introduce el comando a ejecutar (ej. 'bash', 'ls -l /app', 'python3 manage.py shell'): ${RESET}")" command_in_service
            if [ -z "$service_name" ] || [ -z "$command_in_service" ]; then
                echo -e "${ROJO}El nombre del servicio o el comando no pueden estar vac√≠os. ‚ùå${RESET}"
                return
            fi
            echo -e "${AZUL}Ejecutando comando en el servicio '${service_name}'...${RESET}"
            safe_execute "$compose_cmd exec $service_name $command_in_service"
            ;;
        0)
            echo -e "${AZUL}Volviendo al men√∫ de gesti√≥n principal. ‚úÖ${RESET}"
            ;;
        *)
            echo -e "${ROJO}Opci√≥n inv√°lida. Por favor, selecciona un n√∫mero del men√∫. üòï${RESET}"
            ;;
    esac
}

# --- MEN√öS PRINCIPALES Y L√ìGICA DE FLUJO ---

# Muestra el men√∫ de opciones de instalaci√≥n de Docker.
show_docker_install_menu() {
    print_section_header "Men√∫ de Instalaci√≥n de Docker ‚öôÔ∏è"
    local distro=$(get_distribution)
    echo "Tu sistema operativo detectado es: ${CYAN}$distro${RESET}"
    echo -e "${AMARILLO}Selecciona la opci√≥n de instalaci√≥n que mejor se adapte a tu distribuci√≥n.${RESET}"
    echo
    echo "1.  Instalar Docker en ${CYAN}Debian/Ubuntu${RESET} (Recomendado para tu sistema Osiris si es Debian) üêß"
    echo "2.  Instalar Docker en ${CYAN}Fedora/CentOS/RHEL/AlmaLinux/RockyLinux${RESET} (Para otros sistemas basados en Red Hat) üî∂"
    echo "3.  Instalaci√≥n Gen√©rica de Docker (Script de conveniencia - ${ROJO}usar con precauci√≥n${RESET}) üåê"
    echo "0.  Volver al men√∫ principal / Salir del asistente"
    echo
    read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de instalaci√≥n (0-3): ${RESET}")" choice
    echo

    case $choice in
        1) install_docker_debian ;;
        2) install_docker_fedora ;;
        3) install_docker_generic ;;
        0)
            echo -e "${AZUL}¬°Adi√≥s! üëã Esperamos que vuelvas cuando est√©s listo para Docker. ${RESET}"
            exit 0
            ;;
        *)
            echo -e "${ROJO}Opci√≥n inv√°lida. Por favor, selecciona un n√∫mero v√°lido del men√∫. üòï${RESET}"
            ;;
    esac
}

# Muestra el men√∫ principal de gesti√≥n de Docker.
show_docker_management_menu() {
    print_section_header "Men√∫ de Gesti√≥n de Docker üê≥"
    echo -e "${CYAN}Aqu√≠ puedes gestionar todos los aspectos de tu entorno Docker. ¬°Explora con confianza!${RESET}"
    echo
    echo "1.  Gestionar ${MAGENTA}Servicio Docker${RESET} (Iniciar/Detener/Reiniciar/Estado/Configuraci√≥n de Inicio) üõ†Ô∏è"
    echo "2.  Gestionar ${MAGENTA}Im√°genes Docker${RESET} (Listar/Descargar/Eliminar/Inspeccionar/Construir) üñºÔ∏è"
    echo "3.  Gestionar ${MAGENTA}Contenedores Docker${RESET} (Listar/Iniciar/Detener/Eliminar/Logs/Comando/Inspeccionar) üì¶"
    echo "4.  Gestionar ${MAGENTA}Redes Docker${RESET} (Listar/Crear/Eliminar/Inspeccionar) üåê"
    echo "5.  Gestionar ${MAGENTA}Vol√∫menes Docker${RESET} (Listar/Crear/Eliminar/Inspeccionar) üíæ"
    echo "6.  ${MAGENTA}Limpiar Recursos Docker${RESET} (Contenedores/Im√°genes/Vol√∫menes/Redes no usados) üßπ"
    echo "7.  ${MAGENTA}Informaci√≥n y Diagn√≥stico${RESET} del Sistema Docker (Versi√≥n/Info/Logs del Daemon/Eventos/Uso Disco) ‚ÑπÔ∏è"
    echo "8.  ${MAGENTA}Configuraci√≥n Avanzada del Daemon Docker${RESET} (Editar daemon.json) ‚öôÔ∏è"
    echo "9.  ${MAGENTA}A√±adir usuario actual al grupo 'docker'${RESET} üë•"
    echo "10. ${MAGENTA}Actualizar Docker${RESET} ‚¨ÜÔ∏è"
    echo "11. ${MAGENTA}Desinstalar Docker${RESET} completamente üóëÔ∏è"
    echo "12. Gestionar ${MAGENTA}Docker Compose${RESET} (Instalar Standalone / Acciones B√°sicas de Proyecto) üèóÔ∏è"
    echo "0.  ${ROJO}Salir del asistente${RESET}"
    echo
    read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de gesti√≥n (0-12): ${RESET}")" choice
    echo

    case $choice in
        1)
            print_section_header "Submen√∫: Gesti√≥n de Servicio Docker üõ†Ô∏è"
            echo "1.  Ver estado del servicio"
            echo "2.  Iniciar servicio"
            echo "3.  Detener servicio"
            echo "4.  Reiniciar servicio"
            echo "5.  Habilitar inicio al arrancar el sistema"
            echo "6.  Deshabilitar inicio al arrancar el sistema"
            echo "0.  Volver al men√∫ principal"
            read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de servicio (0-6): ${RESET}")" service_choice
            echo
            case $service_choice in
                1) check_docker_status ;;
                2) start_docker ;;
                3) stop_docker ;;
                4) restart_docker ;;
                5) enable_docker_on_boot ;;
                6) disable_docker_on_boot ;;
                0) ;; # Regresa al men√∫ principal
                *) echo -e "${ROJO}Opci√≥n inv√°lida. üòï${RESET}" ;;
            esac
            ;;
        2)
            print_section_header "Submen√∫: Gesti√≥n de Im√°genes Docker üñºÔ∏è"
            echo "1.  Listar im√°genes disponibles"
            echo "2.  Descargar una imagen (pull)"
            echo "3.  Eliminar una imagen"
            echo "4.  Inspeccionar una imagen (ver detalles)"
            echo "5.  Construir una imagen desde un Dockerfile"
            echo "0.  Volver al men√∫ principal"
            read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de imagen (0-5): ${RESET}")" image_choice
            echo
            case $image_choice in
                1) list_images ;;
                2) pull_image ;;
                3) remove_image ;;
                4) inspect_image ;;
                5) build_image ;;
                0) ;;
                *) echo -e "${ROJO}Opci√≥n inv√°lida. üòï${RESET}" ;;
            esac
            ;;
        3)
            print_section_header "Submen√∫: Gesti√≥n de Contenedores Docker üì¶"
            echo "1.  Listar contenedores (activos y todos)"
            echo "2.  Iniciar un contenedor detenido"
            echo "3.  Detener un contenedor en ejecuci√≥n"
            echo "4.  Reiniciar un contenedor"
            echo "5.  Eliminar un contenedor"
            echo "6.  Ver logs de un contenedor"
            echo "7.  Ejecutar un comando dentro de un contenedor"
            echo "8.  Inspeccionar un contenedor (ver detalles)"
            echo "0.  Volver al men√∫ principal"
            read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de contenedor (0-8): ${RESET}")" container_choice
            echo
            case $container_choice in
                1) list_containers ;;
                2) start_container ;;
                3) stop_container ;;
                4) restart_container ;;
                5) remove_container ;;
                6) view_container_logs ;;
                7) exec_container ;;
                8) inspect_container ;;
                0) ;;
                *) echo -e "${ROJO}Opci√≥n inv√°lida. üòï${RESET}" ;;
            esac
            ;;
        4)
            print_section_header "Submen√∫: Gesti√≥n de Redes Docker üåê"
            echo "1.  Listar redes existentes"
            echo "2.  Crear una nueva red"
            echo "3.  Eliminar una red"
            echo "4.  Inspeccionar una red (ver detalles)"
            echo "0.  Volver al men√∫ principal"
            read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de red (0-4): ${RESET}")" network_choice
            echo
            case $network_choice in
                1) list_networks ;;
                2) create_network ;;
                3) remove_network ;;
                4) inspect_network ;;
                0) ;;
                *) echo -e "${ROJO}Opci√≥n inv√°lida. üòï${RESET}" ;;
            esac
            ;;
        5)
            print_section_header "Submen√∫: Gesti√≥n de Vol√∫menes Docker üíæ"
            echo "1.  Listar vol√∫menes existentes"
            echo "2.  Crear un nuevo volumen"
            echo "3.  Eliminar un volumen (¬°CUIDADO con la p√©rdida de datos!)"
            echo "4.  Inspeccionar un volumen (ver detalles)"
            echo "0.  Volver al men√∫ principal"
            read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de volumen (0-4): ${RESET}")" volume_choice
            echo
            case $volume_choice in
                1) list_volumes ;;
                2) create_volume ;;
                3) remove_volume ;;
                4) inspect_volume ;;
                0) ;;
                *) echo -e "${ROJO}Opci√≥n inv√°lida. üòï${RESET}" ;;
            esac
            ;;
        6) prune_docker ;;
        7)
            print_section_header "Submen√∫: Informaci√≥n y Diagn√≥stico de Docker ‚ÑπÔ∏è"
            echo "1.  Ver versi√≥n de Docker (cliente y servidor)"
            echo "2.  Ver informaci√≥n detallada del sistema Docker (docker info)"
            echo "3.  Ver logs del daemon Docker (para depuraci√≥n)"
            echo "4.  Ver eventos de Docker en tiempo real"
            echo "5.  Ver uso de espacio en disco por Docker (docker system df)"
            echo "0.  Volver al men√∫ principal"
            read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de informaci√≥n (0-5): ${RESET}")" info_choice
            echo
            case $info_choice in
                1) docker_version ;;
                2) docker_info ;;
                3) view_docker_logs ;;
                4) view_docker_events ;;
                5) docker_system_df ;;
                0) ;;
                *) echo -e "${ROJO}Opci√≥n inv√°lida. üòï${RESET}" ;;
            esac
            ;;
        8) manage_daemon_config ;;
        9) add_user_to_docker_group ;;
        10) update_docker ;;
        11) uninstall_docker ;;
        12)
            print_section_header "Submen√∫: Gesti√≥n de Docker Compose üèóÔ∏è"
            echo "1.  Instalar Docker Compose (versi√≥n standalone si no es plugin)"
            echo "2.  Gesti√≥n b√°sica de proyectos Docker Compose (up, down, ps, logs, build, exec)"
            echo "0.  Volver al men√∫ principal"
            read -p "$(echo -e "${AMARILLO}Selecciona una opci√≥n de Docker Compose (0-2): ${RESET}")" compose_choice
            echo
            case $compose_choice in
                1) install_docker_compose_standalone ;;
                2) manage_docker_compose_project ;;
                0) ;;
                *) echo -e "${ROJO}Opci√≥n inv√°lida. üòï${RESET}" ;;
            esac
            ;;
        0)
            echo -e "${AZUL}¬°Adi√≥s! üëã Espero que este asistente de Osiris haya sido de gran ayuda. ¬°Hasta la pr√≥xima! ${RESET}"
            exit 0
            ;;
        *)
            echo -e "${ROJO}Opci√≥n inv√°lida. Por favor, selecciona un n√∫mero v√°lido del men√∫. üòï${RESET}"
            ;;
    esac
}

# --- L√ìGICA PRINCIPAL DEL SCRIPT ---
main_logic() {
    check_sudo # Asegura que el script se ejecuta con sudo al principio.
    echo -e "${AZUL}¬°Bienvenido al gestor inteligente de Docker de Osiris! üê≥‚ú®${RESET}"
    echo -e "${AZUL}Este asistente te guiar√° para instalar o gestionar Docker en tu sistema.${RESET}"
    echo -e "${AZUL}Idioma: Espa√±ol${RESET}"
    echo

    # Bucle principal del programa. Contin√∫a hasta que el usuario elija salir.
    while true; do
        if ! is_docker_installed; then
            # Si Docker NO est√° instalado, muestra el men√∫ de instalaci√≥n.
            echo -e "${AMARILLO}--- Docker NO est√° instalado en este sistema. Ofreciendo opciones de instalaci√≥n. --- üòî${RESET}"
            show_docker_install_menu
        else
            # Si Docker YA est√° instalado, muestra el men√∫ de gesti√≥n.
            echo -e "${VERDE}--- Docker YA est√° instalado y funcionando. ¬°Excelente! Ofreciendo opciones de gesti√≥n. --- üéâ${RESET}"
            show_docker_management_menu
        fi
        echo
        echo -e "${CYAN}Presiona Enter para volver al men√∫ principal...${RESET}"
        read -s # Espera por cualquier tecla sin mostrarla para continuar.
        echo
    done
}

# Iniciar la l√≥gica principal del script cuando se ejecuta.
main_logic