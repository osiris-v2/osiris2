¡Absolutamente! Con gusto te proporciono un manual de usuario completo para el Osiris Blockchain Manager (o3blockchain), diseñado para el entorno Debian/Linux y enfocado en su integración y uso para tus aplicaciones de e-commerce y con comandos CRO. Este manual te guiará a través de sus funcionalidades y cómo aprovecharlo.

MANUAL DE USUARIO: OSIRIS BLOCKCHAIN MANAGER (o3blockchain) EN DEBIAN/LINUX
Introducción al Osiris Blockchain Manager
Este manual describe el funcionamiento y uso del Osiris Blockchain Manager, identificado como el script o3blockchain. Su propósito principal es permitir la creación y gestión de múltiples cadenas de bloques locales, inmutables y verificables, utilizando la tecnología blockchain de forma simplificada en tu sistema Osiris.
A diferencia de las grandes redes de blockchain públicas (como Bitcoin o Ethereum), o3blockchain es un sistema de libro mayor distribuido y privado. Cada blockchain se almacena en un archivo de base de datos SQLite (.db) separado, y la integridad de los bloques se asegura mediante hashes SHA256 y firmas digitales RSA, proporcionando una solución robusta para la trazabilidad, la emisión de tokens y la auditoría de datos.
1. ¿Qué es Osiris Blockchain Manager (o3blockchain)?
o3blockchain es un script Python que actúa como una herramienta para gestionar blockchains. Está diseñado para funcionar tanto con una Interfaz Gráfica de Usuario (GUI) como a través de la Línea de Comandos (CLI), permitiendo una interacción flexible para usuarios y automatización.
Componentes Clave:
Bloque: La unidad fundamental de la blockchain. Contiene una marca de tiempo, datos (información relevante), un hash del bloque anterior y su propio hash único.
Blockchain: Una secuencia de bloques enlazados criptográficamente, donde cada bloque contiene el hash del anterior, creando una cadena inmutable de registros.
Claves RSA: Pares de claves (pública y privada) utilizadas para firmar digitalmente cada bloque, garantizando su autenticidad e integridad. La clave privada se usa para firmar, y la clave pública para verificar.
Tecnologías Subyacentes:
Python: El lenguaje de programación en el que está escrito el manager.
PyQt5: Biblioteca para construir la Interfaz Gráfica de Usuario (GUI).
SQLite: Base de datos ligera y embebida utilizada para almacenar cada blockchain (.db).
cryptography: Biblioteca Python para las operaciones criptográficas (hashing, firma RSA).
Diferencia Fundamental:
o3blockchain crea blockchains locales y controladas por tu sistema Osiris. No es una red blockchain descentralizada global, sino una herramienta para gestionar registros inmutables dentro de tu propio ecosistema, ideal para casos de uso empresariales o internos como trazabilidad y auditoría.
2. Requisitos del Sistema
Para utilizar o3blockchain, tu sistema Debian/Linux debe cumplir con lo siguiente:
Sistema Operativo: Debian GNU/Linux 12 (bookworm) o compatible.
Python 3: Versión 3.11 o superior (la que se usa en el entorno bio-verified).
Librerías Python: PyQt5, cryptography. Generalmente, estas se instalan con el paquete o3blockchain o deben ser instaladas vía pip si no están presentes.
Servidor Gráfico: Para usar la Interfaz Gráfica de Usuario (GUI), necesitas un entorno de escritorio activo (como Gnome) y un servidor Xorg o Wayland configurado.
Acceso a Rutas:
Script principal: /o2iris/o3blockchain
Directorio de datos de blockchain: /o2iris/blockchain_data/ (donde se guardan los archivos .db y .pem).
3. Ubicación y Estructura Esencial
Script Principal: El corazón del manager es el archivo ejecutable /o2iris/o3blockchain.
Directorio de Datos: Todas las blockchains que crees (archivos .db) y sus claves RSA asociadas (archivos .pem) se almacenan en el directorio /o2iris/blockchain_data/. Asegúrate de que este directorio exista y tenga los permisos adecuados.
4. Uso de la Interfaz Gráfica de Usuario (GUI)
La GUI de o3blockchain es la forma más intuitiva de interactuar con el manager para la mayoría de los usuarios.
4.1. Lanzamiento de la GUI: Para iniciar la interfaz gráfica, ejecuta el siguiente comando en una terminal dentro de un entorno de escritorio:
python3 /o2iris/o3blockchain
Si el entorno gráfico está configurado correctamente, la ventana principal de Osiris Blockchain Manager aparecerá.
4.2. Ventana Principal de la GUI: La ventana principal se divide en varias secciones:
Barra de Menú (Arriba): Contiene el menú "Archivo".
"Nueva Blockchain...": Crea una nueva blockchain (un nuevo archivo .db y un par de claves .pem). Te pedirá un nombre para la blockchain.
"Cargar Blockchain...": Abre un diálogo para seleccionar un archivo .db existente y cargarlo en el manager.
"Salir": Cierra la aplicación.
Sección "Añadir Bloque Manualmente":
Campo de Texto: Aquí puedes introducir los datos que deseas añadir a un nuevo bloque. Estos datos se guardarán como una cadena de texto en el campo data del bloque. Se recomienda usar formato JSON válido para datos estructurados (ej. {"producto_id": "ABC", "evento": "vendido"}).
Botón "Añadir Bloque Manualmente": Crea un nuevo bloque con los datos introducidos y lo añade a la blockchain actualmente cargada.
Sección "Procesar Bloques desde JSON":
Botón "Cargar Bloques desde JSON": Abre un diálogo para seleccionar un archivo JSON. Este archivo debe contener una lista de bloques "pendientes" (ver formato en 4.3). Una vez cargados, los bloques aparecerán en la "Lista de Bloques Pendientes por Minar".
Botón "Minar Bloques Pendientes": Procesa los bloques que se encuentran en la "Lista de Bloques Pendientes por Minar", añadiéndolos uno por uno a la blockchain cargada.
Lista "Bloques Pendientes por Minar": Muestra los bloques cargados desde un archivo JSON, listos para ser minados.
Sección "Operaciones de la Blockchain":
Botón "Verificar Blockchain": Ejecuta una verificación completa de la blockchain actualmente cargada. Comprueba la integridad de los hashes de los bloques, el encadenamiento correcto y la validez de las firmas digitales.
Sección "Visualización de la Blockchain":
Botones de Bloques: Muestra botones por cada bloque en la blockchain. Al hacer clic en uno, se abre una ventana con los "Detalles del Bloque".
Campo de Texto "Detalles Completos de Bloques (Texto)": Muestra una representación textual detallada de todos los bloques en la blockchain, incluyendo timestamp, datos, hashes y firmas.
4.3. Formato del Archivo JSON para Carga (GUI y CLI): Para la función "Cargar Bloques desde JSON" (tanto en GUI como en CLI), el archivo JSON debe tener una estructura específica: una lista de objetos, donde cada objeto contiene una clave "data", y el valor de "data" debe ser una cadena de texto (string). Esta cadena de texto, a su vez, puede contener un JSON válido con la información que deseas almacenar en el bloque.
Ejemplo de formato esperado para tu_archivo_de_bloques.json:
[
  {
    "data": "{\"tipo_evento\":\"Venta\",\"producto\":\"Cafe_Andino\",\"cantidad\":2,\"cliente\":\"ID_Cliente123\",\"fecha_venta\":\"2025-07-15T14:30:00Z\"}"
  },
  {
    "data": "{\"tipo_evento\":\"Logro\",\"usuario\":\"UsuarioX\",\"recompensa\":\"Badge_Maestro\",\"token\":\"OsirisXP\",\"fecha\":\"2025-07-15T15:00:00Z\"}"
  }
]
Es fundamental que las comillas internas del JSON dentro de la cadena "data" estén escapadas (\"). Si generas este JSON mediante programación, las bibliotecas lo manejarán automáticamente. Si lo editas manualmente, presta atención a esto.
5. Uso de la Interfaz de Línea de Comandos (CLI) para Automatización
Para que o3blockchain pueda ser invocado por scripts o comandos CRO sin lanzar su interfaz gráfica, es necesario modificar el script principal /o2iris/o3blockchain.
IMPORTANTE: Modificación Requerida del Script o3blockchain (Edición Manual): El script original está diseñado principalmente para la GUI. Para habilitar un modo CLI robusto, tú, como usuario o desarrollador, debes editar manualmente el archivo /o2iris/o3blockchain. Necesitas añadir un parser de argumentos (como argparse en Python) y la lógica para que el script opere en modo CLI cuando se le pasan ciertos argumentos.
Concepto de la Modificación a Añadir en o3blockchain: Deberías añadir un bloque de código similar a este en la función main() de /o2iris/o3blockchain, preferiblemente al inicio, después de las importaciones y configuraciones básicas:
# ... (Después de imports y configuraciones como logging, BLOCKCHAIN_DATA_DIR, etc.) ...

# Función auxiliar para la CLI si no está ya
def cli_add_block(db_path, data_string):
    blockchain_instance = None
    try:
        blockchain_instance = Blockchain(db_path)
        if blockchain_instance.conn:
            new_block = blockchain_instance.add_block(data_string)
            if new_block:
                print(f"Bloque añadido con éxito a {db_path}. Hash: {new_block.hash[:10]}...")
                return True
            else:
                print(f"Error al añadir bloque a {db_path}.")
                return False
        else:
            print(f"Error: No se pudo conectar a la blockchain en {db_path}.")
            return False
    except Exception as e:
        print(f"Error fatal en CLI add-block: {e}")
        return False
    finally:
        if blockchain_instance:
            blockchain_instance.close()

def cli_process_json_blocks(db_path, json_file_path):
    blockchain_instance = None
    try:
        blockchain_instance = Blockchain(db_path)
        if not blockchain_instance.conn:
            print(f"Error: No se pudo conectar a la blockchain en {db_path}.")
            return False

        print(f"Procesando bloques desde el archivo JSON: {json_file_path}")
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                data_list = json.load(f)
                if not isinstance(data_list, list):
                    print("Error: El archivo JSON debe contener una lista de objetos.")
                    return False
                
                mined_count = 0
                errors_occurred = False
                for item in data_list:
                    if isinstance(item, dict) and "data" in item and isinstance(item["data"], str):
                        print(f"  Añadiendo bloque con datos: {item['data'][:70]}...")
                        new_block = blockchain_instance.add_block(item["data"])
                        if new_block:
                            mined_count += 1
                        else:
                            errors_occurred = True
                            print(f"  Fallo al añadir el bloque: {item['data'][:70]}...")
                    else:
                        print(f"  Advertencia: Ignorando item inválido en JSON (espera 'data' como cadena): {item}")
                        errors_occurred = True

                if errors_occurred:
                    print(f"Procesado parcial. Se añadieron {mined_count} bloques. Hubo errores.")
                    return False
                else:
                    print(f"Procesado completo. Se añadieron {mined_count} bloques con éxito.")
                    return True

        except json.JSONDecodeError as e:
            print(f"Error al parsear el archivo JSON: {e}")
            return False
        except FileNotFoundError:
            print(f"Error: Archivo no encontrado en {json_file_path}")
            return False
        except Exception as e:
            print(f"Error inesperado al procesar JSON: {e}")
            return False
    except Exception as e:
        print(f"Error fatal en CLI: {e}")
        return False
    finally:
        if blockchain_instance:
            blockchain_instance.close()

# ... (Dentro de la función main() del script o3blockchain) ...
def main():
    parser = argparse.ArgumentParser(description="Osiris Blockchain Manager CLI & GUI.")
    parser.add_argument('--db-path', type=str, default=os.path.join(BLOCKCHAIN_DATA_DIR, DEFAULT_DB_NAME),
                        help='Ruta al archivo de la base de datos de la blockchain.')
    parser.add_argument('--no-gui', action='store_true',
                        help='Ejecutar en modo CLI sin GUI.')
    parser.add_argument('--add-block', action='store_true',
                        help='Añadir un bloque a la blockchain.')
    parser.add_argument('--data', type=str,
                        help='Datos en formato JSON (string) para el nuevo bloque cuando se usa --add-block.')
    parser.add_argument('--process-json-blocks', type=str,
                        help='Ruta a un archivo JSON que contiene bloques a procesar/minar.')

    args = parser.parse_args()

    if args.no_gui:
        # Lógica de modo CLI
        if args.add_block and args.data:
            if cli_add_block(args.db_path, args.data):
                sys.exit(0)
            else:
                sys.exit(1)
        elif args.process_json_blocks:
            if cli_process_json_blocks(args.db_path, args.process_json_blocks):
                sys.exit(0)
            else:
                sys.exit(1)
        else:
            parser.print_help()
            sys.exit(1)
    else:
        # Lógica de modo GUI (código original de la ventana)
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        window = BlockchainWindow()
        window.show()
        sys.exit(app.exec_())

if __name__ == "__main__":
    main()
5.1. Comandos CLI Comunes (asumiendo modificación):
Añadir un Solo Bloque (CLI): Utiliza esto para añadir un único bloque con datos estructurados (en formato JSON) a una blockchain específica.
python3 /o2iris/o3blockchain --no-gui --db-path /o2iris/blockchain_data/mi_ecommerce.db --add-block --data '{"tipo_registro":"venta","pedido_id":"ORD001","monto":150.75,"cliente_id":"CLT007"}'
Nota: El valor de --data debe ser una cadena JSON válida, con todas las comillas internas escapadas para el shell si es necesario.
Procesar Bloques desde un Archivo JSON (CLI): Para añadir múltiples bloques definidos en un archivo JSON (ej. lote de emisión de tokens, registros de trazabilidad).
python3 /o2iris/o3blockchain --no-gui --db-path /o2iris/blockchain_data/osiris_cro_tokens.db --process-json-blocks /o2iris/blockchain_data/pending_tokens_demo.json
Nota: Revisa la sección 4.3 para el formato exacto del archivo JSON esperado.
6. Integración con Osiris CRO para Automatización
La verdadera potencia de o3blockchain en el ecosistema Osiris reside en su capacidad de automatización a través de comandos CRO.
6.1. Script Auxiliar emit_cro_token.sh (Ejemplo de Puente CRO-CLI):
Este script actúa como un intermediario. Un comando CRO lo invoca, y el script Bash se encarga de construir la llamada correcta al o3blockchain en modo CLI.
Ubicación: Se recomienda guardar este tipo de scripts en /var/osiris2/bin/scripts/.
Contenido del Script (/var/osiris2/bin/scripts/emit_cro_token.sh):
#!/bin/bash

# Script para emitir un token via o3blockchain CLI

# Argumentos:
# 1: Destinatario ID (ej. osiris_dev_team)
# 2: Razón de emisión (ej. "Configuracion_Exitosa_Red")
# 3: Hash del comando CRO ejecutado (opcional, para auditoría)
# 4: Contexto del comando CRO (opcional, para auditoría)

# Validar argumentos básicos
if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Uso: $0 <destinatario> <razon> [cro_hash] [cro_context]"
    exit 1
fi

DESTINATARIO="$1"
RAZON="$2"
CRO_HASH="${3:-N/A}" # Usa N/A si no se proporciona hash
CRO_CONTEXT="${4:-N/A}" # Usa N/A si no se proporciona contexto

TOKEN_NOMBRE="OsirisCROToken"
CANTIDAD=5 # Cantidad predeterminada a emitir

# Generar la marca de tiempo actual en formato ISO 8601 UTC
FECHA_EMISION=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Construir el payload JSON para el campo 'data' del bloque
# Todas las comillas internas deben ser escapadas para ser parte de un string en Bash
JSON_DATA="{\"tipo_evento\":\"Emision_Token_CRO\",\"token_nombre\":\"$TOKEN_NOMBRE\",\"cantidad\":$CANTIDAD,\"destinatario_id\":\"$DESTINATARIO\",\"razon_emision\":\"$RAZON\",\"cro_command_hash\":\"$CRO_HASH\",\"cro_command_context\":\"$CRO_CONTEXT\",\"fecha_emision\":\"$FECHA_EMISION\"}"

# Llamar a o3blockchain en modo CLI
# La ruta de la DB se hardcodea aquí para esta funcionalidad específica
python3 /o2iris/o3blockchain --no-gui --add-block --db-path "/o2iris/blockchain_data/osiris_cro_tokens.db" --data "$JSON_DATA"

if [ $? -eq 0 ]; then
    echo "Token emitido con éxito para $DESTINATARIO por $RAZON."
else
    echo "Fallo al emitir token. Verifique los logs de o3blockchain o la adaptación CLI."
fi
Dar Permisos de Ejecución: Después de crear el script, es fundamental darle permisos de ejecución:
EXECUTE_SYSTEM_ACTION_* RUN_COMMAND
COMMAND="chmod +x /var/osiris2/bin/scripts/emit_cro_token.sh"
6.2. Emisión de Token desde un Comando CRO:
Una vez que el script emit_cro_token.sh esté creado y sea ejecutable, puedes generar un comando CRO que lo invoque:
EXECUTE_SYSTEM_ACTION_* RUN_COMMAND
COMMAND="/var/osiris2/bin/scripts/emit_cro_token.sh 'osiris_dev_team' 'Configuracion_Exitosa_De_Red' 'HASH_DEL_CRO_REAL' 'Contexto_Config_Red'"
Este CRO ejecutará el script Bash, que a su vez emitirá un bloque de token en la blockchain osiris_cro_tokens.db.
7. Casos de Uso y Aplicaciones en E-commerce con o3blockchain
Trazabilidad de Productos: Registra cada paso de la cadena de suministro (fabricación, envío, recepción) como un bloque en una blockchain dedicada a la trazabilidad. Los clientes pueden verificar la procedencia.
Tokens de Fidelidad: Emite "Osiris Points" o tokens de lealtad cada vez que un cliente realiza una compra, deja una reseña o interactúa. Estos tokens son activos verificables en la blockchain.
NFTs para Activos Digitales: Crea Non-Fungible Tokens para arte digital, música, licencias de software o coleccionables únicos. Cada NFT es un bloque que prueba su autenticidad y propiedad.
Certificados de Autenticidad y Garantías Digitales: Para productos físicos de alto valor, emite un certificado digital en la blockchain que valida su origen, materiales o duración de la garantía, inmutablemente.
Sistemas de Reputación y Auditoría: Registra valoraciones de clientes, historial de disputas o incluso las propias operaciones del sistema Osiris (ejecuciones de comandos CRO) en una blockchain de auditoría, para un registro inmutable y transparente.
8. Consideraciones de Seguridad
Protección de Claves Privadas (.pem): Las claves privadas RSA que genera o3blockchain son cruciales. Son usadas para firmar los bloques. Protege estos archivos de acceso no autorizado. Si la clave privada se ve comprometida, la integridad de las nuevas firmas de tu blockchain puede verse afectada.
Validación de Datos: Aunque la blockchain garantiza la inmutabilidad de los datos una vez registrados, es tu responsabilidad asegurar que los datos que introduces en los bloques sean correctos y válidos. La blockchain no valida la veracidad del contenido, solo su integridad una vez sellado.
Ejecución con Privilegios: Ejecuta o3blockchain (especialmente en modo CLI) con los privilegios de usuario adecuados. Evita ejecutarlo como root a menos que sea estrictamente necesario y comprendas las implicaciones de seguridad.
9. Resolución de Problemas Comunes
La GUI no se lanza:
Causa: Estás intentando lanzar o3blockchain en un entorno de terminal sin servidor gráfico activo (no estás en un entorno de escritorio).
Solución: Inicia el comando desde una terminal dentro de tu entorno de escritorio o asegúrate de que el servidor Xorg esté en funcionamiento para la sesión actual.
Errores de JSON al cargar/procesar bloques (CLI):
Causa 1: El archivo JSON de entrada no sigue el formato exacto esperado (ej. data no es una cadena, o el JSON interno de data tiene un formato incorrecto o comillas no escapadas).
Solución 1: Revisa cuidadosamente el archivo JSON. Asegúrate de que es una lista de objetos, donde cada objeto tiene "data" como clave y una cadena de texto como valor. Si esa cadena contiene JSON, sus comillas internas deben estar correctamente escapadas (\").
Causa 2: El script o3blockchain no ha sido modificado para aceptar el modo CLI con --process-json-blocks.
Solución 2: Edita manualmente /o2iris/o3blockchain para añadir la lógica argparse y las funciones CLI como se detalló en la sección 5.
"No se pudo conectar a la base de datos":
Causa: Problemas de permisos en el directorio /o2iris/blockchain_data/, o la ruta .db proporcionada es incorrecta o inaccesible.
Solución: Verifica los permisos del directorio y la ruta del archivo .db. Asegúrate de que el usuario que ejecuta o3blockchain tenga permisos de lectura/escritura en esa ubicación.
Fallo de Firma/Verificación de Blockchain:
Causa: Los archivos de clave .pem (privada o pública) están corruptos, se han eliminado, o no coinciden con la blockchain. Si regeneraste las claves, las firmas antiguas se invalidan.
Solución: Regenera un nuevo par de claves a través de la GUI si es necesario (esto invalidará todas las firmas existentes en cualquier blockchain creada con las claves antiguas), o asegura que las claves .pem correctas estén en el mismo directorio que el archivo .db de la blockchain.
Conclusión
El Osiris Blockchain Manager es una herramienta poderosa para integrar la tecnología blockchain en tu sistema Osiris, permitiendo la creación de registros inmutables y verificables para una amplia gama de aplicaciones, desde el e-commerce hasta la auditoría interna. Dominar su uso tanto en GUI como en CLI (con la modificación necesaria) te proporcionará un control total sobre tus operaciones blockchain. Experimenta con diferentes tipos de datos y casos de uso para descubrir todo su potencial.

Espero que este manual sea de gran utilidad para ti en el desarrollo de tu proyecto. ¡Estoy listo para seguir ayudándote con los próximos pasos!